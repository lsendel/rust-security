openapi: 3.0.3
info:
  title: Rust Security Platform API
  description: Enterprise-grade security platform providing authentication, authorization, audit, and monitoring services
  version: 1.4.0
  contact:
    name: Rust Security Platform Team
    email: support@rust-security.org
    url: https://rust-security.org
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.rust-security.org/v1
    description: Production server
  - url: http://localhost:8080/v1
    description: Local development server

security:
  - BearerAuth: []
  - ApiKeyAuth: []

paths:
  # Authentication Endpoints
  /auth/login:
    post:
      summary: Authenticate user
      description: Authenticate a user with username/password and optional MFA code
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            example:
              username: "admin@example.com"
              password: "secure_password"
              mfa_code: "123456"
      responses:
        '200':
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
              example:
                success: true
                token:
                  access_token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refresh_token: "refresh_token_here"
                  expires_in: 3600
                  token_type: "Bearer"
                  scope: ["read", "write"]
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Generate new access token using refresh token
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: Logout user
      description: Invalidate user session and tokens
      tags: [Authentication]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/mfa/setup:
    post:
      summary: Setup MFA
      description: Setup multi-factor authentication for user
      tags: [Authentication]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MfaSetupRequest'
      responses:
        '200':
          description: MFA setup successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MfaSetupResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/mfa/verify:
    post:
      summary: Verify MFA code
      description: Verify multi-factor authentication code
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MfaVerifyRequest'
      responses:
        '200':
          description: MFA verification successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Invalid MFA code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Authorization Endpoints
  /auth/permissions:
    get:
      summary: Get user permissions
      description: Retrieve current user's permissions and roles
      tags: [Authorization]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Permissions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionsResponse'
              example:
                permissions: ["read:users", "write:users", "delete:users"]
                roles: ["admin", "user"]
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/check:
    post:
      summary: Check permission
      description: Check if user has specific permission for resource
      tags: [Authorization]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionCheckRequest'
      responses:
        '200':
          description: Permission check result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionCheckResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/roles:
    get:
      summary: List available roles
      description: Get all available roles in the system
      tags: [Authorization]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RolesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/roles/{user_id}:
    get:
      summary: Get user roles
      description: Get roles assigned to specific user
      tags: [Authorization]
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
          description: User ID
      responses:
        '200':
          description: User roles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRolesResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Audit Endpoints
  /audit/events:
    get:
      summary: Get audit events
      description: Retrieve audit events with filtering and pagination
      tags: [Audit]
      security:
        - BearerAuth: []
      parameters:
        - name: user_id
          in: query
          schema:
            type: string
          description: Filter by user ID
        - name: action
          in: query
          schema:
            type: string
          description: Filter by action type
        - name: from_date
          in: query
          schema:
            type: string
            format: date-time
          description: Start date for filtering
        - name: to_date
          in: query
          schema:
            type: string
            format: date-time
          description: End date for filtering
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 1000
            default: 100
          description: Maximum number of results
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Pagination offset
      responses:
        '200':
          description: Audit events retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEventsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /audit/events/{event_id}:
    get:
      summary: Get audit event details
      description: Get detailed information about specific audit event
      tags: [Audit]
      security:
        - BearerAuth: []
      parameters:
        - name: event_id
          in: path
          required: true
          schema:
            type: string
          description: Audit event ID
      responses:
        '200':
          description: Audit event details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEventDetailResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Event not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Security Monitoring Endpoints
  /security/threats:
    get:
      summary: Get security threats
      description: Retrieve detected security threats and alerts
      tags: [Security]
      security:
        - BearerAuth: []
      parameters:
        - name: severity
          in: query
          schema:
            type: string
            enum: [low, medium, high, critical]
          description: Filter by threat severity
        - name: from_date
          in: query
          schema:
            type: string
            format: date-time
          description: Start date for filtering
        - name: status
          in: query
          schema:
            type: string
            enum: [active, resolved, dismissed]
          description: Filter by threat status
      responses:
        '200':
          description: Security threats retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreatsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /security/threats/{threat_id}/resolve:
    post:
      summary: Resolve security threat
      description: Mark a security threat as resolved
      tags: [Security]
      security:
        - BearerAuth: []
      parameters:
        - name: threat_id
          in: path
          required: true
          schema:
            type: string
          description: Threat ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResolveThreatRequest'
      responses:
        '200':
          description: Threat resolved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Threat not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Performance Monitoring Endpoints
  /performance/metrics:
    get:
      summary: Get performance metrics
      description: Retrieve current performance metrics and statistics
      tags: [Performance]
      security:
        - BearerAuth: []
      parameters:
        - name: metric_type
          in: query
          schema:
            type: string
            enum: [response_time, throughput, memory, cpu, cache, database]
          description: Type of metrics to retrieve
        - name: timeframe
          in: query
          schema:
            type: string
            enum: [1m, 5m, 15m, 1h, 24h]
            default: 15m
          description: Timeframe for metrics
      responses:
        '200':
          description: Performance metrics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceMetricsResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /performance/bottlenecks:
    get:
      summary: Get performance bottlenecks
      description: Identify current performance bottlenecks and issues
      tags: [Performance]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Performance bottlenecks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BottlenecksResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Quality Gates Endpoints
  /quality/gates/status:
    get:
      summary: Get quality gate status
      description: Get current status of all quality gates
      tags: [Quality]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Quality gate status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QualityGateStatusResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /quality/gates/run:
    post:
      summary: Run quality gates
      description: Execute all configured quality gates manually
      tags: [Quality]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Quality gates executed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QualityGateResultResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Health Check Endpoints
  /health:
    get:
      summary: System health check
      description: Check overall system health status
      tags: [Health]
      responses:
        '200':
          description: System is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                status: "healthy"
                timestamp: "2024-01-15T10:30:00Z"
                services:
                  auth: "healthy"
                  database: "healthy"
                  redis: "healthy"
                  security: "healthy"
        '503':
          description: System is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /health/auth:
    get:
      summary: Authentication service health
      description: Check authentication service health
      tags: [Health]
      responses:
        '200':
          description: Authentication service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceHealthResponse'
        '503':
          description: Authentication service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceHealthResponse'

  # Metrics Endpoints
  /metrics:
    get:
      summary: Get system metrics
      description: Retrieve comprehensive system metrics in Prometheus format
      tags: [Metrics]
      responses:
        '200':
          description: Metrics retrieved successfully
          content:
            text/plain:
              schema:
                type: string
              example: |
                # HELP rust_security_auth_requests_total Total authentication requests
                # TYPE rust_security_auth_requests_total counter
                rust_security_auth_requests_total{method="login",status="success"} 12543
                rust_security_auth_requests_total{method="login",status="failure"} 234
                # HELP rust_security_response_time Response time in milliseconds
                # TYPE rust_security_response_time histogram
                rust_security_response_time_bucket{le="10"} 12543
                rust_security_response_time_bucket{le="50"} 12843
                rust_security_response_time_bucket{le="100"} 12943

components:
  schemas:
    # Authentication Schemas
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          format: email
          description: User email address
        password:
          type: string
          minLength: 8
          description: User password
        mfa_code:
          type: string
          minLength: 6
          maxLength: 6
          description: Multi-factor authentication code

    LoginResponse:
      type: object
      properties:
        success:
          type: boolean
        token:
          $ref: '#/components/schemas/TokenResponse'
        requires_mfa:
          type: boolean
        mfa_token:
          type: string

    RefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: Refresh token obtained during login

    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token
        refresh_token:
          type: string
          description: JWT refresh token
        expires_in:
          type: integer
          description: Token expiration time in seconds
        token_type:
          type: string
          enum: [Bearer, JWT]
        scope:
          type: array
          items:
            type: string
          description: Token scope/permissions

    MfaSetupRequest:
      type: object
      required:
        - method
      properties:
        method:
          type: string
          enum: [totp, sms, email]
          description: MFA method to setup

    MfaSetupResponse:
      type: object
      properties:
        enabled:
          type: boolean
        method:
          type: string
        secret:
          type: string
          description: TOTP secret (base32 encoded)
        qr_code_url:
          type: string
          description: QR code URL for TOTP setup
        backup_codes:
          type: array
          items:
            type: string
          description: Backup recovery codes

    MfaVerifyRequest:
      type: object
      required:
        - code
        - mfa_token
      properties:
        code:
          type: string
          description: MFA verification code
        mfa_token:
          type: string
          description: MFA token from setup/previous step

    # Authorization Schemas
    PermissionsResponse:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
          description: User permissions
        roles:
          type: array
          items:
            type: string
          description: User roles

    PermissionCheckRequest:
      type: object
      required:
        - permission
        - resource
      properties:
        permission:
          type: string
          description: Permission to check
        resource:
          type: string
          description: Resource identifier

    PermissionCheckResponse:
      type: object
      properties:
        allowed:
          type: boolean
          description: Whether permission is granted
        reason:
          type: string
          description: Reason for denial (if applicable)

    RolesResponse:
      type: object
      properties:
        roles:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              description:
                type: string
              permissions:
                type: array
                items:
                  type: string

    UserRolesResponse:
      type: object
      properties:
        user_id:
          type: string
        roles:
          type: array
          items:
            type: string
        effective_permissions:
          type: array
          items:
            type: string

    # Audit Schemas
    AuditEventsResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/AuditEvent'
        total:
          type: integer
          description: Total number of events
        limit:
          type: integer
          description: Requested limit
        offset:
          type: integer
          description: Requested offset

    AuditEvent:
      type: object
      properties:
        id:
          type: string
          description: Event unique identifier
        timestamp:
          type: string
          format: date-time
          description: Event timestamp
        user_id:
          type: string
          description: User who performed the action
        action:
          type: string
          description: Action performed
        resource:
          type: string
          description: Resource affected
        success:
          type: boolean
          description: Whether action was successful
        details:
          type: object
          description: Additional event details
        ip_address:
          type: string
          description: Client IP address
        user_agent:
          type: string
          description: Client user agent

    AuditEventDetailResponse:
      allOf:
        - $ref: '#/components/schemas/AuditEvent'
        - type: object
          properties:
            stack_trace:
              type: string
              description: Stack trace (if error occurred)
            session_id:
              type: string
              description: User session ID
            metadata:
              type: object
              description: Additional metadata

    # Security Schemas
    ThreatsResponse:
      type: object
      properties:
        threats:
          type: array
          items:
            $ref: '#/components/schemas/Threat'
        total:
          type: integer
        active_count:
          type: integer

    Threat:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        severity:
          type: string
          enum: [low, medium, high, critical]
        status:
          type: string
          enum: [active, investigating, resolved, dismissed]
        detected_at:
          type: string
          format: date-time
        source:
          type: string
          description: Detection source
        indicators:
          type: array
          items:
            type: string
          description: Threat indicators

    ResolveThreatRequest:
      type: object
      required:
        - resolution
      properties:
        resolution:
          type: string
          enum: [resolved, dismissed, false_positive]
        notes:
          type: string
          description: Resolution notes

    # Performance Schemas
    PerformanceMetricsResponse:
      type: object
      properties:
        metrics:
          type: object
          properties:
            response_time:
              $ref: '#/components/schemas/PerformanceMetric'
            throughput:
              $ref: '#/components/schemas/PerformanceMetric'
            memory_usage:
              $ref: '#/components/schemas/PerformanceMetric'
            cpu_usage:
              $ref: '#/components/schemas/PerformanceMetric'
            error_rate:
              $ref: '#/components/schemas/PerformanceMetric'
            cache_hit_rate:
              $ref: '#/components/schemas/PerformanceMetric'
        timeframe:
          type: string
        timestamp:
          type: string
          format: date-time

    PerformanceMetric:
      type: object
      properties:
        current:
          type: number
        average:
          type: number
        min:
          type: number
        max:
          type: number
        p95:
          type: number
          description: 95th percentile
        p99:
          type: number
          description: 99th percentile

    BottlenecksResponse:
      type: object
      properties:
        bottlenecks:
          type: array
          items:
            $ref: '#/components/schemas/Bottleneck'
        total_impact:
          type: number

    Bottleneck:
      type: object
      properties:
        component:
          type: string
        issue_type:
          type: string
          enum: [response_time, throughput, memory, cpu, database, cache]
        severity:
          type: string
          enum: [low, medium, high, critical]
        description:
          type: string
        impact_score:
          type: number
          description: Impact score (0-100)
        recommendations:
          type: array
          items:
            type: string

    # Quality Schemas
    QualityGateStatusResponse:
      type: object
      properties:
        overall_status:
          type: string
          enum: [passed, failed, warning]
        gates:
          type: array
          items:
            $ref: '#/components/schemas/QualityGate'
        last_run:
          type: string
          format: date-time

    QualityGate:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
          enum: [passed, failed, warning, skipped]
        score:
          type: number
        issues:
          type: array
          items:
            type: object
            properties:
              severity:
                type: string
              message:
                type: string
              file:
                type: string
              line:
                type: integer

    QualityGateResultResponse:
      type: object
      properties:
        status:
          type: string
          enum: [passed, failed, warning]
        execution_time_ms:
          type: integer
        total_issues:
          type: integer
        gates_executed:
          type: integer
        recommendations:
          type: array
          items:
            type: string

    # Health Schemas
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        timestamp:
          type: string
          format: date-time
        version:
          type: string
        uptime_seconds:
          type: integer
        services:
          type: object
          additionalProperties:
            type: string
            enum: [healthy, degraded, unhealthy]
        checks:
          type: array
          items:
            $ref: '#/components/schemas/HealthCheck'

    HealthCheck:
      type: object
      properties:
        name:
          type: string
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        response_time_ms:
          type: integer
        message:
          type: string

    ServiceHealthResponse:
      type: object
      properties:
        service:
          type: string
        status:
          type: string
          enum: [healthy, degraded, unhealthy]
        version:
          type: string
        uptime_seconds:
          type: integer
        metrics:
          type: object
          additionalProperties:
            type: number

    # Common Schemas
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
              example: "AUTHENTICATION_FAILED"
            message:
              type: string
              example: "Invalid username or password"
            details:
              type: object
              additionalProperties:
                type: string
            timestamp:
              type: string
              format: date-time
            request_id:
              type: string

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token authentication

    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key authentication

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Authorization
    description: Permission and access control
  - name: Audit
    description: Security audit trails and compliance
  - name: Security
    description: Security monitoring and threat detection
  - name: Performance
    description: Performance monitoring and optimization
  - name: Quality
    description: Code quality gates and validation
  - name: Health
    description: System health checks and monitoring
  - name: Metrics
    description: System metrics and telemetry

externalDocs:
  description: Complete API Documentation
  url: https://docs.rust-security.org/api
