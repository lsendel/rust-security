name: Auth Service Comprehensive Tests

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'auth-service/**'
      - '.github/workflows/comprehensive-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'auth-service/**'
      - '.github/workflows/comprehensive-tests.yml'
  schedule:
    # Run comprehensive tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: 'true'
        type: boolean
      run_security_tests:
        description: 'Run security tests'
        required: false
        default: 'true'
        type: boolean
      run_benchmarks:
        description: 'Run benchmarks'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: read
  actions: read
  security-events: write
  checks: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  TEST_MODE: 1
  REQUEST_SIGNING_SECRET: ${{ secrets.REQUEST_SIGNING_SECRET }}
  DISABLE_RATE_LIMIT: 1

jobs:
  # Quick validation job for fast feedback
  quick-validation:
    name: Quick Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
      with:
        components: rustfmt, clippy
        
    - name: Cache Cargo dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          auth-service/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('auth-service/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Check formatting
      run: cargo fmt --all --check
      working-directory: auth-service
      
    - name: Run clippy
      run: cargo clippy --all-features --all-targets -- -D warnings
      working-directory: auth-service
      
    - name: Compile check
      run: cargo check --all-features
      working-directory: auth-service
      
    - name: Quick test validation
      run: ./scripts/quick_test_validation.sh
      working-directory: auth-service

  # Unit tests job
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quick-validation
    
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        
    continue-on-error: ${{ matrix.rust != 'stable' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
      with:
        toolchain: ${{ matrix.rust }}
        
    - name: Cache Cargo dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          auth-service/target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('auth-service/Cargo.lock') }}
        
    - name: Run unit tests
      run: |
        cargo test --lib --bins \
          --all-features \
          --verbose \
          -- --test-threads=2 --nocapture
      working-directory: auth-service
      env:
        RUST_LOG: debug

  # Integration tests job
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: quick-validation
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
      
    - name: Cache Cargo dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          auth-service/target
        key: ${{ runner.os }}-integration-cargo-${{ hashFiles('auth-service/Cargo.lock') }}
        
    - name: Run integration tests
      run: |
        cargo test --test '*' integration \
          --all-features \
          --verbose \
          -- --test-threads=1 --nocapture
      working-directory: auth-service
      env:
        REDIS_URL: redis://localhost:6379
        RUST_LOG: debug

  # Security tests job
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: quick-validation
    if: github.event.inputs.run_security_tests != 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
      
    - name: Cache Cargo dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          auth-service/target
        key: ${{ runner.os }}-security-cargo-${{ hashFiles('auth-service/Cargo.lock') }}
        
    - name: Run security tests
      run: |
        cargo test --test '*' security \
          --all-features \
          --verbose \
          -- --test-threads=1 --nocapture
      working-directory: auth-service
      env:
        RUST_LOG: debug
        
    - name: Run property-based tests
      run: |
        cargo test --test '*' property \
          --all-features \
          --verbose \
          -- --test-threads=2 --nocapture
      working-directory: auth-service
      env:
        PROPTEST_CASES: 500
        QUICKCHECK_TESTS: 500

  # Performance tests job
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [unit-tests, integration-tests]
    if: github.event.inputs.run_performance_tests != 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
      
    - name: Cache Cargo dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          auth-service/target
        key: ${{ runner.os }}-performance-cargo-${{ hashFiles('auth-service/Cargo.lock') }}
        
    - name: Build release binary
      run: cargo build --release --all-features
      working-directory: auth-service
      
    - name: Run performance tests
      run: |
        cargo test --test '*' performance \
          --all-features \
          --release \
          --verbose \
          -- --test-threads=1 --nocapture
      working-directory: auth-service
      
    - name: Upload performance results
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
      if: always()
      with:
        name: performance-results
        path: auth-service/test-results/performance.log
        retention-days: 30

  # MFA tests job
  mfa-tests:
    name: MFA Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: quick-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
      
    - name: Cache Cargo dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          auth-service/target
        key: ${{ runner.os }}-mfa-cargo-${{ hashFiles('auth-service/Cargo.lock') }}
        
    - name: Run MFA tests
      run: |
        cargo test --test '*' mfa \
          --all-features \
          --verbose \
          -- --test-threads=2 --nocapture
      working-directory: auth-service

  # Code coverage job
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [unit-tests, integration-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
      with:
        components: llvm-tools-preview
        
    - name: Cache Cargo dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          auth-service/target
        key: ${{ runner.os }}-coverage-cargo-${{ hashFiles('auth-service/Cargo.lock') }}
        
    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@331a600f1b10a3fed8dc56f925012bede91ae51f # v2.41.7
      with:
        tool: cargo-llvm-cov
      
    - name: Generate code coverage
      run: |
        cargo llvm-cov --all-features \
          --workspace \
          --lcov \
          --output-path lcov.info \
          --ignore-filename-regex "tests/.*"
      working-directory: auth-service
      env:
        RUST_LOG: debug
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@e28ff129e5465c2c0dcc6f003fc735cb6ae0c673 # v4.5.0
      with:
        file: auth-service/lcov.info
        directory: auth-service
        flags: auth-service
        name: auth-service-coverage
        fail_ci_if_error: false
        
    - name: Generate coverage report
      run: |
        cargo llvm-cov --all-features \
          --html \
          --output-dir coverage-html \
          --ignore-filename-regex "tests/.*"
      working-directory: auth-service
      
    - name: Upload coverage report
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
      with:
        name: coverage-report
        path: auth-service/coverage-html
        retention-days: 30

  # Benchmarks job (optional)
  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [unit-tests, integration-tests]
    if: github.event.inputs.run_benchmarks == 'true' || github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
      
    - name: Cache Cargo dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          auth-service/target
        key: ${{ runner.os }}-bench-cargo-${{ hashFiles('auth-service/Cargo.lock') }}
        
    - name: Run benchmarks
      run: |
        cargo bench --features benchmarks \
          -- --output-format html
      working-directory: auth-service
      
    - name: Upload benchmark results
      uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
      with:
        name: benchmark-results
        path: auth-service/target/criterion
        retention-days: 30

  # Security audit job
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
      
    - name: Install cargo-audit
      run: cargo install cargo-audit --locked
      
    - name: Run security audit
      run: cargo audit
      working-directory: auth-service
      
    - name: Check for known vulnerabilities
      run: cargo audit --deny warnings
      working-directory: auth-service
      continue-on-error: true

  # Dependency check job
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
      
    - name: Install cargo-deny
      run: cargo install cargo-deny --locked
      
    - name: Run dependency check
      run: cargo deny check
      working-directory: auth-service

  # Summary job
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [unit-tests, integration-tests, security-tests, performance-tests, mfa-tests, coverage]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Generate test summary
      run: |
        echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Unit tests
        if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
          echo "✅ Unit Tests: **PASSED**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Unit Tests: **FAILED**" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Integration tests
        if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "✅ Integration Tests: **PASSED**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Integration Tests: **FAILED**" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Security tests
        if [[ "${{ needs.security-tests.result }}" == "success" ]]; then
          echo "✅ Security Tests: **PASSED**" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.security-tests.result }}" == "skipped" ]]; then
          echo "⏭️ Security Tests: **SKIPPED**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security Tests: **FAILED**" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Performance tests
        if [[ "${{ needs.performance-tests.result }}" == "success" ]]; then
          echo "✅ Performance Tests: **PASSED**" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.performance-tests.result }}" == "skipped" ]]; then
          echo "⏭️ Performance Tests: **SKIPPED**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Performance Tests: **FAILED**" >> $GITHUB_STEP_SUMMARY
        fi
        
        # MFA tests
        if [[ "${{ needs.mfa-tests.result }}" == "success" ]]; then
          echo "✅ MFA Tests: **PASSED**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ MFA Tests: **FAILED**" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Coverage
        if [[ "${{ needs.coverage.result }}" == "success" ]]; then
          echo "✅ Code Coverage: **PASSED**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Code Coverage: **FAILED**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage Report: Available as workflow artifact" >> $GITHUB_STEP_SUMMARY
        echo "- Performance Results: Available as workflow artifact" >> $GITHUB_STEP_SUMMARY
        echo "- Test Logs: Check individual job outputs" >> $GITHUB_STEP_SUMMARY
        
    - name: Check overall result
      run: |
        if [[ "${{ needs.unit-tests.result }}" != "success" ]] || \
           [[ "${{ needs.integration-tests.result }}" != "success" ]] || \
           [[ "${{ needs.mfa-tests.result }}" != "success" ]]; then
          echo "❌ Critical tests failed"
          exit 1
        fi
        
        echo "✅ All critical tests passed"
