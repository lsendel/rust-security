name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # RELEASE VALIDATION
  # ============================================================================
  
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if prerelease
          if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi
          
          echo "Release version: $VERSION"

      - name: Check if version exists
        run: |
          if git tag --list | grep -q "^${{ steps.version.outputs.version }}$"; then
            echo "Error: Version ${{ steps.version.outputs.version }} already exists"
            exit 1
          fi

  # ============================================================================
  # BUILD RELEASE ARTIFACTS
  # ============================================================================
  
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ${{ matrix.os }}
    needs: [validate-release]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive-name: rust-security-linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive-name: rust-security-linux-aarch64
          - os: macos-latest
            target: x86_64-apple-darwin
            archive-name: rust-security-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            archive-name: rust-security-macos-aarch64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu

      - name: Build release binary
        run: |
          if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
          fi
          
          cargo build --release --target ${{ matrix.target }} --bin auth-service
          cargo build --release --target ${{ matrix.target }} --bin policy-service

      - name: Create archive
        run: |
          mkdir -p dist
          
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/auth-service.exe dist/
            cp target/${{ matrix.target }}/release/policy-service.exe dist/
            cd dist && 7z a ${{ matrix.archive-name }}.zip *
          else
            cp target/${{ matrix.target }}/release/auth-service dist/
            cp target/${{ matrix.target }}/release/policy-service dist/
            tar -czf ${{ matrix.archive-name }}.tar.gz -C dist .
          fi

      - name: Generate checksums
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            sha256sum ${{ matrix.archive-name }}.zip > ${{ matrix.archive-name }}.zip.sha256
          else
            sha256sum ${{ matrix.archive-name }}.tar.gz > ${{ matrix.archive-name }}.tar.gz.sha256
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-artifacts
          path: |
            ${{ matrix.archive-name }}.*

  # ============================================================================
  # BUILD AND SIGN CONTAINER IMAGES
  # ============================================================================
  
  build-containers:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: [validate-release]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
          labels: |
            org.opencontainers.image.title=Rust Security Platform
            org.opencontainers.image.description=Production-ready authentication and authorization platform
            org.opencontainers.image.vendor=Rust Security Team

      - name: Build and push container image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./security/configs/Dockerfile.security
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.validate-release.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Sign container image
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: |
          cosign sign --yes \
            --annotations "version=${{ needs.validate-release.outputs.version }}" \
            --annotations "repo=${{ github.repository }}" \
            --annotations "ref=${{ github.sha }}" \
            ${{ steps.meta.outputs.tags }}@${{ steps.build.outputs.digest }}

  # ============================================================================
  # PACKAGE HELM CHARTS
  # ============================================================================
  
  package-helm:
    name: Package Helm Charts
    runs-on: ubuntu-latest
    needs: [validate-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.13.0

      - name: Update chart versions
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"
          
          # Update auth-service chart
          yq eval ".version = \"$VERSION_NO_V\"" -i helm/auth-service/Chart.yaml
          yq eval ".appVersion = \"$VERSION_NO_V\"" -i helm/auth-service/Chart.yaml
          
          # Update policy-service chart
          yq eval ".version = \"$VERSION_NO_V\"" -i helm/policy-service/Chart.yaml
          yq eval ".appVersion = \"$VERSION_NO_V\"" -i helm/policy-service/Chart.yaml

      - name: Package charts
        run: |
          helm package helm/auth-service
          helm package helm/policy-service

      - name: Sign charts
        run: |
          helm plugin install https://github.com/sigstore/helm-sigstore
          for chart in *.tgz; do
            helm sigstore sign "$chart"
          done

      - name: Upload chart packages
        uses: actions/upload-artifact@v3
        with:
          name: helm-charts
          path: |
            *.tgz
            *.tgz.prov

  # ============================================================================
  # GENERATE RELEASE NOTES
  # ============================================================================
  
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: [validate-release]
    outputs:
      release-notes: ${{ steps.notes.outputs.notes }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: notes
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          PREV_VERSION=$(git tag --sort=-version:refname | grep -v "$VERSION" | head -n1)
          
          if [[ -z "$PREV_VERSION" ]]; then
            PREV_VERSION=$(git rev-list --max-parents=0 HEAD)
          fi
          
          # Generate changelog
          cat > release-notes.md << EOF
          ## What's Changed
          
          $(git log --pretty=format:"* %s (%h)" ${PREV_VERSION}..HEAD | grep -v "Merge pull request")
          
          ## Security Updates
          
          * All dependencies updated to latest secure versions
          * Container images signed with Cosign
          * SBOM included with release artifacts
          
          ## Breaking Changes
          
          _No breaking changes in this release_
          
          ## Installation
          
          ### Container Images
          \`\`\`
          docker pull ghcr.io/${{ github.repository }}:$VERSION
          \`\`\`
          
          ### Helm Charts
          \`\`\`
          helm repo add rust-security https://github.com/${{ github.repository }}/releases/download/$VERSION
          helm install auth-service rust-security/auth-service --version ${VERSION#v}
          \`\`\`
          
          ### Binary Downloads
          
          * [Linux x86_64](https://github.com/${{ github.repository }}/releases/download/$VERSION/rust-security-linux-x86_64.tar.gz)
          * [Linux ARM64](https://github.com/${{ github.repository }}/releases/download/$VERSION/rust-security-linux-aarch64.tar.gz)
          * [macOS x86_64](https://github.com/${{ github.repository }}/releases/download/$VERSION/rust-security-macos-x86_64.tar.gz)
          * [macOS ARM64](https://github.com/${{ github.repository }}/releases/download/$VERSION/rust-security-macos-aarch64.tar.gz)
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_VERSION}...${VERSION}
          EOF
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          cat release-notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload release notes
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: release-notes.md

  # ============================================================================
  # CREATE GITHUB RELEASE
  # ============================================================================
  
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, build-containers, package-helm, generate-release-notes]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create GitHub Release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          release_name: Release ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-release-notes.outputs.release-notes }}
          draft: false
          prerelease: ${{ needs.validate-release.outputs.is-prerelease }}

      - name: Upload release assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          UPLOAD_URL="${{ steps.create_release.outputs.upload_url }}"
          
          # Upload binary archives
          for file in release-artifacts/*; do
            if [[ -f "$file" ]]; then
              filename=$(basename "$file")
              curl -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "${UPLOAD_URL%\{*}?name=$filename"
            fi
          done
          
          # Upload Helm charts
          for file in helm-charts/*; do
            if [[ -f "$file" ]]; then
              filename=$(basename "$file")
              curl -X POST \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Content-Type: application/octet-stream" \
                --data-binary @"$file" \
                "${UPLOAD_URL%\{*}?name=$filename"
            fi
          done

  # ============================================================================
  # NOTIFY RELEASE
  # ============================================================================
  
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always()
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            🚀 **Release ${{ needs.validate-release.outputs.version }}** is now available!
            
            📦 **Artifacts:**
            • Container images signed with Cosign
            • Multi-platform binaries (Linux, macOS)
            • Helm charts for Kubernetes deployment
            • Complete SBOM for supply chain security
            
            🔗 **Links:**
            • [Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }})
            • [Container Registry](https://ghcr.io/${{ github.repository }})
            • [Documentation](https://github.com/${{ github.repository }}/tree/${{ needs.validate-release.outputs.version }}/docs)
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow

      - name: Update documentation
        run: |
          # Trigger documentation update workflow
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/dispatches \
            -d '{"event_type":"release","client_payload":{"version":"${{ needs.validate-release.outputs.version }}"}}'