name: PR On-Demand Performance

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: pr-on-demand-performance-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: true

jobs:
  run-performance:
    name: Run performance on PR head
    if: |
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/performance-scan')
    runs-on: ubuntu-latest
    steps:
      - name: Authorize commenter
        id: auth
        uses: actions/github-script@v7
        with:
          script: |
            const commenter = context.payload.comment.user.login;
            let allowed = false;
            let level = 'none';
            if (commenter === 'github-actions[bot]') {
              allowed = true;
              level = 'bot';
            } else {
              const { data } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: commenter,
              });
              level = data.permission;
              allowed = ['admin','maintain','write'].includes(level);
            }
            core.setOutput('allowed', String(allowed));
            core.setOutput('level', level);

      - name: Deny unauthorized user
        if: steps.auth.outputs.allowed != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '⚠️ You are not authorized to run /performance-scan. Maintainers only.'
            });
            core.setFailed('Unauthorized commenter');

      - name: Extract PR metadata
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            core.setOutput('head_sha', pr.head.sha);
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('head_repo', pr.head.repo.full_name);

      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr.outputs.head_sha }}

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cargo cache
        uses: Swatinem/rust-cache@v2

      - name: Run performance tests (pattern)
        continue-on-error: true
        run: |
          cargo test --workspace --test '*performance*' --release -- --nocapture || true

      - name: Run benches (if available)
        continue-on-error: true
        run: |
          if ls benches 1>/dev/null 2>&1 || rg -n "\[\[bench\]\]" Cargo.toml; then
            cargo bench || true
          else
            echo "No benches configured; skipping cargo bench"
          fi

      - name: Upload performance artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pr-performance-results-${{ github.event.issue.number }}
          path: |
            target/criterion/**
            target/release/deps/**performance**

      - name: Comment results on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const msg = `⚡ Performance run completed. Artifacts: pr-performance-results-${{ github.event.issue.number }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: msg,
            });
