name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  security-audit:
    runs-on: ubuntu-latest
    name: Security Audit
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Install security tools
        run: |
          cargo install cargo-audit --locked
          cargo install cargo-deny --locked
          cargo install cargo-outdated --locked

      - name: Security audit
        run: cargo audit --deny warnings

      - name: License/dep policy check
        run: cargo deny check

      - name: Check for outdated dependencies
        run: cargo outdated --exit-code 1 || true

  build-test:
    runs-on: ubuntu-latest
    needs: security-audit
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt, clippy

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy (strict)
        run: cargo clippy --all-targets --all-features -- -D warnings -D clippy::all -D clippy::pedantic

      - name: Build
        run: cargo build --all --all-features --verbose

      - name: Tests
        run: cargo test --all --all-features --verbose

      - name: Integration tests
        run: |
          # Start services in background for integration testing
          cargo run -p auth-service &
          cargo run -p policy-service &
          sleep 10
          # Run integration tests
          cargo test --test '*integration*' --all-features --verbose
          # Cleanup
          pkill -f "auth-service|policy-service" || true

  duplicate-code:
    name: Duplicate Code Analysis
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Run jscpd duplicate code detector
        run: |
          if [ -f ".jscpd.json" ]; then
            npx jscpd --config .jscpd.json
          else
            echo "Warning: .jscpd.json not found, running with defaults"
            npx jscpd
          fi

  security-scan:
    runs-on: ubuntu-latest
    needs: duplicate-code
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  docker-security:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -f auth-service/Dockerfile.prod -t auth-service:test .
          docker build -f policy-service/Dockerfile -t policy-service:test .

      - name: Run Trivy on Docker images
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ runner.temp }}:/root/.cache/ \
            aquasec/trivy:latest image auth-service:test
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ runner.temp }}:/root/.cache/ \
            aquasec/trivy:latest image policy-service:test

  performance-test:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build release
        run: cargo build --release --all

      - name: Install load testing tools
        run: |
          sudo apt-get update
          sudo apt-get install -y apache2-utils

      - name: Run performance tests
        run: |
          # Start services
          ./target/release/auth-service &
          ./target/release/policy-service &
          sleep 10

          # Basic load test
          chmod +x scripts/testing/load_test.sh
          ./scripts/testing/load_test.sh http://localhost:8080 5 50

          # Cleanup
          pkill -f "auth-service|policy-service" || true


