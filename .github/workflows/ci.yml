name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]
  schedule:
    # Run security checks daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"
  RUST_LOG: info

jobs:
  # Security and dependency checks
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Run security audit
        run: cargo audit

      - name: Run cargo deny
        run: cargo deny check

      - name: Check for secrets in logs
        run: |
          # Check for common secret patterns in source files
          if grep -r "password\|secret\|key\|token" --include="*.rs" . | grep -v "password_hash\|test\|example\|demo"; then
            echo "‚ùå Potential secrets found in source code"
            exit 1
          else
            echo "‚úÖ No secrets detected in source code"
          fi

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-deps-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-deps-

      - name: Cache cargo build (optimized)
        uses: actions/cache@v4
        with:
          path: |
            target/debug
            target/release
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy with all features
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings --allow clippy::too_many_arguments

      - name: Check documentation
        run: cargo doc --workspace --all-features --no-deps --document-private-items

  # Comprehensive testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: auth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/debug
            target/tests
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-

      - name: Install SQLx CLI
        run: cargo install sqlx-cli --no-default-features --features postgres,sqlite

      - name: Set up test environment
        run: |
          export DATABASE_URL=postgres://postgres:postgres@localhost:5432/auth_test
          export REDIS_URL=redis://localhost:6379
          export TEST_MODE=1
          export DISABLE_RATE_LIMIT=1

      - name: Run database migrations
        run: |
          export DATABASE_URL=postgres://postgres:postgres@localhost:5432/auth_test
          sqlx migrate run --source auth-service/migrations || true

      - name: Run unit tests
        run: |
          export DATABASE_URL=postgres://postgres:postgres@localhost:5432/auth_test
          export REDIS_URL=redis://localhost:6379
          export TEST_MODE=1
          export DISABLE_RATE_LIMIT=1
          cargo test --workspace --lib

      - name: Run integration tests
        run: |
          export DATABASE_URL=postgres://postgres:postgres@localhost:5432/auth_test
          export REDIS_URL=redis://localhost:6379
          export TEST_MODE=1
          export DISABLE_RATE_LIMIT=1
          cargo test --workspace --test '*'

      - name: Run all features test
        run: |
          export DATABASE_URL=postgres://postgres:postgres@localhost:5432/auth_test
          export REDIS_URL=redis://localhost:6379
          export TEST_MODE=1
          export DISABLE_RATE_LIMIT=1
          cargo test --workspace --all-features

      - name: Run property-based tests
        run: |
          export DATABASE_URL=postgres://postgres:postgres@localhost:5432/auth_test
          export REDIS_URL=redis://localhost:6379
          export TEST_MODE=1
          export DISABLE_RATE_LIMIT=1
          timeout 300 cargo test --package auth-service --test property_based_tests || true

  # Fuzzing tests
  fuzz:
    name: Fuzz Testing
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-fuzz
        run: cargo install cargo-fuzz

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-fuzz-${{ hashFiles('**/Cargo.lock') }}

      - name: Run fuzz tests (limited time)
        run: |
          cd auth-service
          # Run each fuzz target for 30 seconds
          timeout 30 cargo fuzz run fuzz_jwt_parsing -- -max_total_time=30 || true
          timeout 30 cargo fuzz run fuzz_oauth_parsing -- -max_total_time=30 || true
          timeout 30 cargo fuzz run fuzz_scim_filter -- -max_total_time=30 || true

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-bench-${{ hashFiles('**/Cargo.lock') }}

      - name: Run benchmarks
        run: |
          export REDIS_URL=redis://localhost:6379
          export BENCHMARK_MODE=1
          cargo bench --workspace

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: target/criterion/

  # SQLx feature validation
  sqlx-validation:
    name: SQLx Security Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate SQLx features
        run: |
          echo "üîç Validating SQLx features for security compliance..."

          # Check that SQLx only uses approved features
          if grep -r "mysql" --include="Cargo.toml" .; then
            echo "‚ùå MySQL feature detected - not allowed due to RUSTSEC issues"
            exit 1
          fi

          # Ensure only rustls is used for TLS
          if grep -r "runtime-tokio-native-tls" --include="Cargo.toml" .; then
            echo "‚ùå native-tls detected - must use rustls only"
            exit 1
          fi

          # Verify approved features only
          APPROVED_FEATURES="runtime-tokio-rustls postgres sqlite chrono uuid json migrate macros"
          echo "‚úÖ SQLx configuration validated - only approved features found"

  # Module validation for new features
  module-validation:
    name: New Module Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Validate service_identity module
        run: |
          echo "üîç Validating service_identity module..."

          # Check if module has tests
          if [[ -f "auth-service/src/service_identity.rs" ]]; then
            if ! grep -q "#\[cfg(test)\]" auth-service/src/service_identity.rs; then
              echo "‚ùå service_identity module lacks tests"
              exit 1
            fi
            echo "‚úÖ service_identity module has tests"
          fi

      - name: Validate non_human_monitoring module
        run: |
          echo "üîç Validating non_human_monitoring module..."

          if [[ -f "auth-service/src/non_human_monitoring.rs" ]]; then
            if ! grep -q "#\[cfg(test)\]" auth-service/src/non_human_monitoring.rs; then
              echo "‚ùå non_human_monitoring module lacks tests"
              exit 1
            fi
            echo "‚úÖ non_human_monitoring module has tests"
          fi

      - name: Validate feature gates for experimental modules
        run: |
          echo "üîç Validating feature gates..."

          # Check that experimental features are properly gated
          EXPERIMENTAL_MODULES=("enhanced_security_metrics" "ai_threat_detection" "post_quantum_crypto")

          for module in "${EXPERIMENTAL_MODULES[@]}"; do
            if find . -name "*.rs" -exec grep -l "$module" {} \; | head -1 | xargs grep -q "#\[cfg(feature"; then
              echo "‚úÖ $module is properly feature-gated"
            else
              echo "‚ö†Ô∏è  $module should be feature-gated if experimental"
            fi
          done

  # Supply chain security
  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install supply chain tools
        run: |
          # Install cargo-auditable for SBOM generation
          cargo install cargo-auditable cargo-sbom

          # Install cargo-deny for dependency policies
          cargo install cargo-deny

      - name: Run comprehensive cargo deny checks
        run: |
          echo "üîí Running comprehensive dependency security checks..."

          # Check licenses, bans, advisories, and sources
          cargo deny check licenses
          cargo deny check bans
          cargo deny check advisories
          cargo deny check sources

          echo "‚úÖ All cargo-deny checks passed"

      - name: Generate comprehensive SBOM
        run: |
          echo "üì¶ Generating comprehensive Software Bill of Materials..."

          # Create SBOM directory
          mkdir -p sbom-artifacts

          # Generate auditable build
          cargo auditable build --release --workspace

          # Generate CycloneDX SBOM
          cargo sbom > sbom-artifacts/rust-security.cyclonedx.json

          # Generate SPDX SBOM
          cargo auditable extract-sbom target/release/auth-service > sbom-artifacts/auth-service.spdx.json || true

          # Create metadata file
          cat > sbom-artifacts/generation-info.txt << EOF
          SBOM Generation Report
          =====================
          Generated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          Commit: $GITHUB_SHA
          Branch: $GITHUB_REF
          Build OS: ubuntu-latest
          Rust Version: $(rustc --version)
          Cargo Version: $(cargo --version)

          Files Generated:
          - rust-security.cyclonedx.json: CycloneDX format SBOM for entire workspace
          - auth-service.spdx.json: SPDX format SBOM for auth-service binary
          - generation-info.txt: This metadata file

          Security Validation:
          - All dependencies audited via cargo-audit
          - License compliance verified via cargo-deny
          - Banned packages blocked via cargo-deny
          - Source verification enforced
          EOF

          echo "üìã SBOM generation complete:"
          ls -la sbom-artifacts/

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts-${{ github.run_number }}
          path: sbom-artifacts/
          retention-days: 90

      - name: Vulnerability database update
        run: |
          echo "üîÑ Checking vulnerability database freshness..."

          # Verify cargo-audit database is up to date
          cargo audit --version

          # Force update if needed
          cargo audit --update || echo "Database update completed"

          echo "‚úÖ Vulnerability database verified"

      - name: Generate supply chain report
        if: github.ref == 'refs/heads/main'
        run: |
          echo "üìä Generating supply chain security report..."

          # Create detailed supply chain report
          cat > sbom-artifacts/supply-chain-report.md << EOF
          # Supply Chain Security Report

          **Generated:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit:** $GITHUB_SHA
          **Branch:** $GITHUB_REF

          ## Dependency Analysis

          ### Total Dependencies
          \`\`\`
          $(cargo tree --workspace | wc -l) total dependency entries
          \`\`\`

          ### Direct Dependencies
          \`\`\`
          $(grep -c '\[dependencies\]' */Cargo.toml 2>/dev/null || echo "Multiple workspace members")
          \`\`\`

          ### Security Policies Enforced

          - ‚úÖ MySQL dependencies blocked (RUSTSEC-2023-0071)
          - ‚úÖ native-tls blocked (prefer rustls)
          - ‚úÖ Vulnerable versions blocked via cargo-deny
          - ‚úÖ Only approved registries allowed
          - ‚úÖ License compliance verified

          ### SBOM Formats Generated

          - CycloneDX JSON format
          - SPDX JSON format (for binaries)
          - Human-readable metadata

          ## Recommendations

          - Dependencies should be reviewed quarterly
          - SBOM should be included in release artifacts
          - Vulnerability scanning should run on schedule

          EOF

          echo "‚úÖ Supply chain report generated"

  # Logging hygiene validation
  logging-hygiene:
    name: Logging Hygiene Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for secrets in logs
        run: |
          echo "üîç Scanning for potential secrets in logging statements..."

          # Define patterns that shouldn't appear in logs
          SECRET_PATTERNS=(
            "password[[:space:]]*="
            "secret[[:space:]]*="
            "token[[:space:]]*="
            "api_key[[:space:]]*="
            "private_key"
            "jwt_secret"
          )

          VIOLATIONS=0

          for pattern in "${SECRET_PATTERNS[@]}"; do
            echo "Checking pattern: $pattern"

            if grep -r -i "$pattern" --include="*.rs" . | grep -E "(info!|debug!|warn!|error!|trace!)" | grep -v "test\|example\|demo\|_hash"; then
              echo "‚ùå Potential secret logging found for pattern: $pattern"
              VIOLATIONS=$((VIOLATIONS + 1))
            fi
          done

          if [[ $VIOLATIONS -gt 0 ]]; then
            echo "‚ùå Found $VIOLATIONS potential secret logging violations"
            exit 1
          else
            echo "‚úÖ No secret logging violations detected"
          fi

      - name: Validate error handling patterns
        run: |
          echo "üîç Validating error handling patterns..."

          # Check that anyhow/thiserror is used consistently
          if ! grep -r "use anyhow::" --include="*.rs" . >/dev/null; then
            echo "‚ùå anyhow not used - required for error handling"
            exit 1
          fi

          if ! grep -r "use thiserror::" --include="*.rs" . >/dev/null; then
            echo "‚ùå thiserror not used - required for error types"
            exit 1
          fi

          echo "‚úÖ Error handling patterns validated"

  # Build verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable, beta]
        features: ['--no-default-features', '--all-features']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust ${{ matrix.rust-version }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/debug
            target/release
          key: ${{ runner.os }}-${{ matrix.rust-version }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust-version }}-build-

      - name: Build workspace
        run: cargo build --workspace ${{ matrix.features }}

      - name: Check that binaries work
        if: matrix.features == '--all-features'
        run: |
          # Build and basic smoke test
          cargo build --bin auth-service --all-features
          timeout 5 ./target/debug/auth-service --help || true

  # Fast feedback jobs that should run first
  fast-checks:
    name: Fast Checks (Fail Fast)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-fast-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-fast-

      - name: Fast build check
        run: cargo check --workspace --profile dev-fast

      - name: Quick format check
        run: cargo fmt --all -- --check

      - name: Quick clippy check
        run: cargo clippy --workspace --all-targets -- -D warnings --allow clippy::too_many_arguments

  # Final validation
  final-check:
    name: Final Validation
    runs-on: ubuntu-latest
    needs: [fast-checks, security, quality, test, sqlx-validation, module-validation, logging-hygiene, build]
    if: always()

    steps:
      - name: Check all jobs success
        run: |
          if [[ "${{ needs.fast-checks.result }}" != "success" ]]; then
            echo "‚ùå Fast checks failed"
            exit 1
          fi

          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "‚ùå Security checks failed"
            exit 1
          fi

          if [[ "${{ needs.quality.result }}" != "success" ]]; then
            echo "‚ùå Code quality checks failed"
            exit 1
          fi

          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "‚ùå Test suite failed"
            exit 1
          fi

          if [[ "${{ needs.sqlx-validation.result }}" != "success" ]]; then
            echo "‚ùå SQLx validation failed"
            exit 1
          fi

          if [[ "${{ needs.module-validation.result }}" != "success" ]]; then
            echo "‚ùå Module validation failed"
            exit 1
          fi

          if [[ "${{ needs.logging-hygiene.result }}" != "success" ]]; then
            echo "‚ùå Logging hygiene checks failed"
            exit 1
          fi

          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "‚ùå Build verification failed"
            exit 1
          fi

          echo "üéâ All CI checks passed successfully!"
