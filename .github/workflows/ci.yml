name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Quality Gates Job
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1
      with:
        components: rustfmt, clippy

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

    - name: Check security advisories
      run: cargo audit --deny warnings

    - name: Check dependency licenses
      run: cargo deny check

  # Build and Test Job
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: quality-gates
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Build workspace
      run: cargo build --workspace --all-features

    - name: Run tests
      run: cargo test --workspace --all-features --verbose

    - name: Generate coverage (optional)
      run: cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info
      continue-on-error: true

  # Security Scan Job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-gates
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Run cargo audit
      run: cargo audit

    - name: Run cargo deny
      run: cargo deny check

  # Performance Benchmark (optional)
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Run benchmarks
      run: cargo bench --workspace
      continue-on-error: true

  # Documentation Check
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    needs: quality-gates
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Rust toolchain
      uses: actions-rust-lang/setup-rust-toolchain@v1

    - name: Check documentation
      run: cargo doc --workspace --all-features --no-deps

    - name: Check for missing docs
      run: |
        if cargo clippy --workspace --all-targets --all-features -- -W missing_docs | grep -q "missing_docs"; then
          echo "Some public items are missing documentation"
          cargo clippy --workspace --all-targets --all-features -- -W missing_docs
          exit 1
        fi
      continue-on-error: true
