name: PR On-Demand Frontend Validate

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: pr-on-demand-frontend-${{ github.event.issue.number || github.run_id }}
  cancel-in-progress: true

jobs:
  run-frontend-validate:
    name: Run frontend validation on PR head
    if: |
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/frontend-validate')
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: user-portal
    steps:
      - name: Authorize commenter
        id: auth
        uses: actions/github-script@v7
        with:
          script: |
            const commenter = context.payload.comment.user.login;
            let allowed = false;
            let level = 'none';
            if (commenter === 'github-actions[bot]') {
              allowed = true;
              level = 'bot';
            } else {
              const { data } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: commenter,
              });
              level = data.permission;
              allowed = ['admin','maintain','write'].includes(level);
            }
            core.setOutput('allowed', String(allowed));
            core.setOutput('level', level);

      - name: Deny unauthorized user
        if: steps.auth.outputs.allowed != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '‚ö†Ô∏è You are not authorized to run /frontend-validate. Maintainers only.'
            });
            core.setFailed('Unauthorized commenter');

      - name: Extract PR metadata
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            core.setOutput('head_sha', pr.head.sha);

      - name: Checkout PR head
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr.outputs.head_sha }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: user-portal/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint --if-present

      - name: Test
        run: npm test -- --run --coverage --reporter=default || npm test -- --run --reporter=default

      - name: Build
        run: npm run build

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: pr-frontend-dist-${{ github.event.issue.number }}
          path: user-portal/dist
          if-no-files-found: warn

      - name: Comment results on PR
        uses: actions/github-script@v7
        with:
          script: |
            const msg = `üß™ Frontend validate completed. Artifact: pr-frontend-dist-${{ github.event.issue.number }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: msg,
            });
