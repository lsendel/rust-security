name: Enhanced CI Pipeline

on:
  push:
    branches: [ main, master, develop, '**/fix-*', '**/feat-*' ]
  pull_request:
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUST_LOG: warn

jobs:
  # Fast compilation check - runs first to fail fast
  compilation-check:
    name: "üì¶ Compilation Check"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: compilation-check-${{ hashFiles('Cargo.lock') }}

      - name: Check MVP compilation
        run: cargo check --workspace --no-default-features --features security-essential
        
      - name: Check with all MVP features
        run: cargo check --workspace --features security-essential,redis-sessions,postgres,metrics,api-keys

  # Code quality checks
  code-quality:
    name: "üîç Code Quality"
    runs-on: ubuntu-latest
    needs: compilation-check
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: code-quality-${{ hashFiles('Cargo.lock') }}

      - name: Format check
        run: cargo fmt --all -- --check

      - name: Clippy check
        run: cargo clippy --workspace -- -D warnings

  policy-service:
    name: "üß© Policy Service (Isolated)"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task: [build, clippy, test]
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      PORT: 8081
      ALLOWED_ORIGINS: http://localhost:3000
      DATABASE_URL: postgres://postgres:test_password@localhost:5432/test_db
      REDIS_URL: redis://localhost:6379
      RUST_BACKTRACE: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: policy-service-${{ matrix.task }}-${{ hashFiles('Cargo.lock') }}

      - name: Build policy-service
        if: matrix.task == 'build'
        run: cargo build -p policy-service --all-features --locked

      - name: Clippy policy-service
        if: matrix.task == 'clippy'
        run: cargo clippy -p policy-service --all-targets --all-features -- -D warnings

      - name: Test policy-service
        if: matrix.task == 'test'
        run: cargo test -p policy-service --all-features -- --nocapture

  # Matrix strategy for different test types
  tests:
    name: "üß™ Tests"
    runs-on: ${{ matrix.os }}
    needs: compilation-check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        test-type: [unit, integration-shared, security]
        include:
          - os: ubuntu-latest
            test-type: unit
            test-command: "cargo test --workspace --lib --bins"
            test-threads: "4"
          - os: ubuntu-latest  
            test-type: integration-shared
            test-command: "cargo test --workspace --test example_shared_integration_test"
            test-threads: "1"
          - os: ubuntu-latest
            test-type: security
            test-command: "cargo test --workspace security"
            test-threads: "4"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: tests-${{ matrix.test-type }}-${{ hashFiles('Cargo.lock') }}

      - name: Install test dependencies
        run: |
          # Install any required dependencies for tests
          sudo apt-get update
          sudo apt-get install -y redis-server
          sudo systemctl start redis-server

      - name: Run ${{ matrix.test-type }} tests
        env:
          RUST_TEST_THREADS: ${{ matrix.test-threads }}
          TEST_MODE: "1"
          DISABLE_RATE_LIMIT: "1"
        run: ${{ matrix.test-command }}
        timeout-minutes: 15

  # Performance and load tests (runs separately)
  performance-tests:
    name: "‚ö° Performance Tests"
    runs-on: ubuntu-latest
    needs: [compilation-check, tests]
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'performance')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: performance-${{ hashFiles('Cargo.lock') }}

      - name: Run performance tests
        env:
          RUST_TEST_THREADS: "1"
        run: cargo test --workspace --test '*performance*' --release
        timeout-minutes: 10

  # Security scanning
  security-scan:
    name: "üõ°Ô∏è Security Scan"
    runs-on: ubuntu-latest
    needs: compilation-check
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install --force cargo-audit

      - name: Run security audit
        run: cargo audit

      - name: Run dependency check
        run: cargo tree --duplicates

  # Documentation build
  documentation:
    name: "üìö Documentation"
    runs-on: ubuntu-latest
    needs: compilation-check
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          key: docs-${{ hashFiles('Cargo.lock') }}

      - name: Build documentation
        run: cargo doc --workspace --all-features --no-deps

      - name: Deploy documentation
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc

  # Cleanup and optimization check
  cleanup-check:
    name: "üßπ Cleanup & Optimization"
    runs-on: ubuntu-latest
    needs: [tests, code-quality]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Check for unused dependencies
        run: |
          cargo install --force cargo-machete
          cargo machete

      - name: Check build artifact size
        run: |
          cargo build --workspace --release
          du -sh target/release/
          ls -la target/release/ | head -10

  # Final status check
  ci-success:
    name: "‚úÖ CI Success"
    runs-on: ubuntu-latest
    needs: [compilation-check, code-quality, tests, security-scan]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.compilation-check.result }}" != "success" ]]; then
            echo "‚ùå Compilation check failed"
            exit 1
          fi
          if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
            echo "‚ùå Code quality check failed"
            exit 1
          fi
          if [[ "${{ needs.tests.result }}" != "success" ]]; then
            echo "‚ùå Tests failed"
            exit 1
          fi
          if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "‚ùå Security scan failed"
            exit 1
          fi
          echo "üéâ All CI checks passed!"

      - name: Performance summary
        if: needs.performance-tests.result == 'success'
        run: echo "‚ö° Performance tests passed"
