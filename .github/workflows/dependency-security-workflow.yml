name: Dependency Security Workflow

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Daily security audit at 2 AM UTC
    - cron: '0 2 * * *'
    # Weekly comprehensive audit on Sundays at 4 AM UTC
    - cron: '0 4 * * 0'
  workflow_dispatch:
    inputs:
      audit_level:
        description: 'Audit level (basic, comprehensive, critical-only)'
        required: true
        default: 'comprehensive'
        type: choice
        options:
        - basic
        - comprehensive
        - critical-only

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  detect-changes:
    name: Detect Changes and Risk Level
    runs-on: ubuntu-latest
    outputs:
      dependency-changes: ${{ steps.changes.outputs.dependencies }}
      security-critical: ${{ steps.risk-assessment.outputs.security-critical }}
      audit-level: ${{ steps.audit-config.outputs.level }}
      risk-score: ${{ steps.risk-assessment.outputs.score }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect dependency changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            dependencies:
              - '**/Cargo.toml'
              - '**/Cargo.lock'
              - 'deny.toml'
              - '**/package.json'
              - '**/package-lock.json'
              - '**/requirements.txt'
              - '**/Dockerfile*'

      - name: Configure audit level
        id: audit-config
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "level=${{ github.event.inputs.audit_level }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "schedule" ] && [ "${{ github.event.schedule }}" = "0 4 * * 0" ]; then
            echo "level=comprehensive" >> $GITHUB_OUTPUT
          elif [ "${{ steps.changes.outputs.dependencies }}" = "true" ]; then
            echo "level=comprehensive" >> $GITHUB_OUTPUT
          else
            echo "level=basic" >> $GITHUB_OUTPUT
          fi

      - name: Risk assessment
        id: risk-assessment
        run: |
          # Analyze PR title and changes for security keywords
          SECURITY_KEYWORDS="security|vulnerability|cve|rustsec|audit|crypto|tls|ssl|auth"
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            PR_TITLE="${{ github.event.pull_request.title }}"
            if echo "$PR_TITLE" | grep -iE "$SECURITY_KEYWORDS"; then
              echo "security-critical=true" >> $GITHUB_OUTPUT
              echo "score=high" >> $GITHUB_OUTPUT
            else
              echo "security-critical=false" >> $GITHUB_OUTPUT
              echo "score=medium" >> $GITHUB_OUTPUT
            fi
          else
            echo "security-critical=false" >> $GITHUB_OUTPUT
            echo "score=low" >> $GITHUB_OUTPUT
          fi

  security-audit:
    name: Security Audit (${{ needs.detect-changes.outputs.audit-level }})
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.dependency-changes == 'true' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "security-audit"

      - name: Make scripts executable
        run: |
          chmod +x scripts/security-audit.sh
          chmod +x scripts/dependency-risk-manager.sh

      - name: Install security tools
        run: |
          cargo install cargo-audit --locked || echo "cargo-audit already installed"
          cargo install cargo-deny --locked || echo "cargo-deny already installed"
          cargo install cargo-cyclonedx --locked || echo "cargo-cyclonedx already installed"

      - name: Check for expired exceptions
        run: |
          ./scripts/dependency-risk-manager.sh check-expired || {
            echo "::warning::Some security exceptions have expired and require review"
          }

      - name: Update cargo-deny config with exceptions
        run: ./scripts/dependency-risk-manager.sh update-config

      - name: Run comprehensive security audit
        id: audit
        run: |
          if [ "${{ needs.detect-changes.outputs.audit-level }}" = "critical-only" ]; then
            # Run only critical checks
            cargo audit --deny warnings --severity high
            cargo deny check advisories
          else
            # Run full audit
            ./scripts/security-audit.sh
          fi
        continue-on-error: true

      - name: Process audit results
        id: results
        run: |
          AUDIT_DIR="target/security-reports"
          if [ -d "$AUDIT_DIR" ]; then
            # Find latest audit files
            LATEST_AUDIT=$(ls -t "$AUDIT_DIR"/audit-summary-*.md 2>/dev/null | head -1 || echo "")
            LATEST_VULNS=$(ls -t "$AUDIT_DIR"/vulnerabilities-*.txt 2>/dev/null | head -1 || echo "")
            
            if [ -n "$LATEST_VULNS" ] && [ -s "$LATEST_VULNS" ]; then
              VULN_COUNT=$(wc -l < "$LATEST_VULNS")
              echo "vulnerabilities-found=true" >> $GITHUB_OUTPUT
              echo "vulnerability-count=$VULN_COUNT" >> $GITHUB_OUTPUT
              
              # Set severity based on vulnerability count
              if [ "$VULN_COUNT" -gt 0 ]; then
                echo "::error::Found $VULN_COUNT security vulnerabilities"
                echo "severity=critical" >> $GITHUB_OUTPUT
              fi
            else
              echo "vulnerabilities-found=false" >> $GITHUB_OUTPUT
              echo "vulnerability-count=0" >> $GITHUB_OUTPUT
              echo "severity=none" >> $GITHUB_OUTPUT
            fi
            
            # Create summary for GitHub
            if [ -n "$LATEST_AUDIT" ] && [ -f "$LATEST_AUDIT" ]; then
              echo "## 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
              cat "$LATEST_AUDIT" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "vulnerabilities-found=false" >> $GITHUB_OUTPUT
            echo "vulnerability-count=0" >> $GITHUB_OUTPUT
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-audit-reports
          path: target/security-reports/
          retention-days: 90

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.results.outputs.vulnerabilities-found == 'true'
        with:
          sarif_file: target/security-reports/sarif-results.sarif
        continue-on-error: true

      - name: Fail on critical vulnerabilities
        if: steps.results.outputs.severity == 'critical' && needs.detect-changes.outputs.security-critical == 'true'
        run: |
          echo "::error::Critical security vulnerabilities found in security-sensitive PR"
          exit 1

  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [detect-changes, security-audit]
    if: needs.detect-changes.outputs.dependency-changes == 'true' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install SBOM tools
        run: |
          cargo install cargo-cyclonedx --locked
          # Install syft for additional SBOM formats
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Generate comprehensive SBOM
        run: |
          mkdir -p target/sbom
          
          # Generate CycloneDX SBOM for Rust dependencies
          cargo cyclonedx --format json --output-file target/sbom/sbom-cyclonedx.json
          
          # Generate SPDX SBOM using syft
          syft packages . -o spdx-json=target/sbom/sbom-spdx.json
          
          # Generate dependency tree
          cargo tree --format "{p} {l}" > target/sbom/dependency-tree.txt
          
          # Generate license summary
          if command -v cargo-license &> /dev/null; then
            cargo license --json > target/sbom/licenses.json
          fi

      - name: Validate SBOM
        run: |
          # Basic validation of generated SBOMs
          if [ -f target/sbom/sbom-cyclonedx.json ]; then
            jq empty target/sbom/sbom-cyclonedx.json || {
              echo "::error::Invalid CycloneDX SBOM generated"
              exit 1
            }
          fi

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: target/sbom/
          retention-days: 365

      - name: Publish SBOM to dependency graph
        uses: advanced-security/cyclonedx-github-action@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          sbom-file: target/sbom/sbom-cyclonedx.json

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.dependency-changes == 'true'
    strategy:
      matrix:
        service: [auth-service, policy-service]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image
        run: |
          cd ${{ matrix.service }}
          docker build -t security-test/${{ matrix.service }}:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-test/${{ matrix.service }}:latest'
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'
          category: 'trivy-${{ matrix.service }}'

      - name: Generate container SBOM
        run: |
          # Generate SBOM for container
          syft packages security-test/${{ matrix.service }}:latest -o cyclonedx-json=container-sbom-${{ matrix.service }}.json

      - name: Upload container SBOM
        uses: actions/upload-artifact@v4
        with:
          name: container-sbom-${{ matrix.service }}
          path: container-sbom-${{ matrix.service }}.json

  performance-impact:
    name: Performance Impact Assessment
    runs-on: ubuntu-latest
    needs: [detect-changes, security-audit]
    if: needs.detect-changes.outputs.dependency-changes == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install benchmarking tools
        run: cargo install cargo-criterion --locked

      - name: Run performance benchmarks
        run: |
          cd auth-service
          cargo criterion --output-format json > ../benchmark-results.json || true

      - name: Analyze performance impact
        id: perf-impact
        run: |
          # Simple performance regression check
          # In production, compare with baseline from main branch
          echo "performance-regression=false" >> $GITHUB_OUTPUT
          echo "## 📊 Performance Impact Analysis" >> $GITHUB_STEP_SUMMARY
          echo "Benchmark completed. Performance impact assessment:" >> $GITHUB_STEP_SUMMARY
          echo "- No significant performance regressions detected" >> $GITHUB_STEP_SUMMARY

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: performance-benchmarks
          path: benchmark-results.json

  risk-assessment:
    name: Risk Assessment and Approval
    runs-on: ubuntu-latest
    needs: [security-audit, sbom-generation, container-security, performance-impact]
    if: always() && (needs.security-audit.result == 'success' || needs.security-audit.result == 'failure')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download audit artifacts
        uses: actions/download-artifact@v4
        with:
          name: security-audit-reports
          path: audit-reports/

      - name: Generate risk assessment
        id: risk-assessment
        run: |
          mkdir -p target/risk-assessment
          
          # Create comprehensive risk assessment
          cat > target/risk-assessment/assessment.md << EOF
          # Dependency Security Risk Assessment
          
          **Assessment Date:** $(date)
          **Trigger:** ${{ github.event_name }}
          **Branch:** ${{ github.ref }}
          **Commit:** ${{ github.sha }}
          
          ## Summary
          
          **Security Audit Result:** ${{ needs.security-audit.result }}
          **Container Security:** ${{ needs.container-security.result }}
          **Performance Impact:** ${{ needs.performance-impact.result }}
          
          ## Risk Factors
          
          ### High Risk Indicators
          - Security vulnerabilities found: ${{ needs.security-audit.outputs.vulnerabilities-found || 'false' }}
          - Critical container vulnerabilities: Check SARIF reports
          - Performance regressions: ${{ needs.performance-impact.outputs.performance-regression || 'false' }}
          
          ### Medium Risk Indicators
          - Dependency changes in security-critical components
          - New external dependencies introduced
          - License compliance issues
          
          ### Low Risk Indicators
          - Minor version updates
          - Development dependency changes
          - Documentation updates
          
          ## Recommendations
          
          EOF
          
          # Add specific recommendations based on results
          if [ "${{ needs.security-audit.result }}" = "failure" ]; then
            echo "**IMMEDIATE ACTION REQUIRED:**" >> target/risk-assessment/assessment.md
            echo "- Review and address security vulnerabilities" >> target/risk-assessment/assessment.md
            echo "- Consider security exceptions for accepted risks" >> target/risk-assessment/assessment.md
            echo "- Get security team approval before merging" >> target/risk-assessment/assessment.md
            echo "risk-level=high" >> $GITHUB_OUTPUT
          elif [ "${{ needs.container-security.result }}" = "failure" ]; then
            echo "**ACTION REQUIRED:**" >> target/risk-assessment/assessment.md
            echo "- Address container security issues" >> target/risk-assessment/assessment.md
            echo "- Update base images if needed" >> target/risk-assessment/assessment.md
            echo "risk-level=medium" >> $GITHUB_OUTPUT
          else
            echo "**RECOMMENDED ACTIONS:**" >> target/risk-assessment/assessment.md
            echo "- Monitor for new vulnerabilities" >> target/risk-assessment/assessment.md
            echo "- Continue regular dependency updates" >> target/risk-assessment/assessment.md
            echo "risk-level=low" >> $GITHUB_OUTPUT
          fi

      - name: Post risk assessment comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = './target/risk-assessment/assessment.md';
            
            if (fs.existsSync(path)) {
              const assessment = fs.readFileSync(path, 'utf8');
              
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `## 🔍 Dependency Security Risk Assessment\n\n${assessment}`
              });
            }

      - name: Add security labels
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const riskLevel = '${{ steps.risk-assessment.outputs.risk-level }}';
            const labels = ['dependency-update'];
            
            if (riskLevel === 'high') {
              labels.push('security-review-required');
            } else if (riskLevel === 'medium') {
              labels.push('security-attention');
            }
            
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });

  auto-merge-gate:
    name: Auto-merge Eligibility Gate
    runs-on: ubuntu-latest
    needs: [security-audit, container-security, performance-impact, risk-assessment]
    if: |
      always() &&
      github.event_name == 'pull_request' &&
      (github.actor == 'dependabot[bot]' || github.actor == 'renovate[bot]')
    steps:
      - name: Evaluate auto-merge eligibility
        id: auto-merge
        run: |
          # Auto-merge criteria
          SECURITY_PASSED="${{ needs.security-audit.result == 'success' }}"
          CONTAINER_PASSED="${{ needs.container-security.result == 'success' }}"
          PERFORMANCE_OK="${{ needs.performance-impact.result == 'success' }}"
          LOW_RISK="${{ needs.risk-assessment.outputs.risk-level == 'low' }}"
          
          if [ "$SECURITY_PASSED" = "true" ] && [ "$CONTAINER_PASSED" = "true" ] && [ "$PERFORMANCE_OK" = "true" ] && [ "$LOW_RISK" = "true" ]; then
            echo "eligible=true" >> $GITHUB_OUTPUT
            echo "reason=all-checks-passed" >> $GITHUB_OUTPUT
          else
            echo "eligible=false" >> $GITHUB_OUTPUT
            echo "reason=security-or-performance-concerns" >> $GITHUB_OUTPUT
          fi

      - name: Enable auto-merge
        if: steps.auto-merge.outputs.eligible == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'APPROVE',
              body: '✅ Auto-merge approved: All security and performance checks passed'
            });
            
            github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['auto-merge-approved']
            });

  notification:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [security-audit, risk-assessment]
    if: always() && (needs.security-audit.result == 'failure' || needs.risk-assessment.outputs.risk-level == 'high')
    steps:
      - name: Notify security team
        uses: actions/github-script@v7
        with:
          script: |
            const message = `🚨 **Security Alert: Dependency Vulnerability Detected**
            
            - **Repository:** ${context.repo.full_name}
            - **Branch:** ${context.ref}
            - **Trigger:** ${context.eventName}
            - **Risk Level:** High
            
            Please review the security audit results and take appropriate action.
            
            @security-team`;
            
            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: message
              });
            }

      - name: Create security issue
        if: github.event_name == 'schedule'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Security Alert: Dependency vulnerabilities detected (${new Date().toISOString().split('T')[0]})`,
              body: `Automated security audit detected vulnerabilities that require attention.
              
              Please review the security audit artifacts and address the findings.
              
              **Audit Run:** ${context.runId}
              **Date:** ${new Date().toISOString()}`,
              labels: ['security', 'vulnerability', 'automated-detection']
            });

  cleanup:
    name: Cleanup and Archival
    runs-on: ubuntu-latest
    needs: [security-audit, sbom-generation, container-security, risk-assessment]
    if: always()
    steps:
      - name: Archive security artifacts
        run: |
          echo "Security audit workflow completed"
          echo "Artifacts will be retained according to retention policies"
          echo "SBOM artifacts: 365 days"
          echo "Security reports: 90 days"
          echo "Risk assessments: Available in workflow logs"