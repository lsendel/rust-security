name: Rust CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  rust-ci:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable, nightly]
      fail-fast: false
    
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
            target/debug/deps
            target/debug/build
            target/debug/.fingerprint
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-
            ${{ runner.os }}-cargo-

      - name: Show rustc/cargo versions
        run: |
          rustc -Vv
          cargo -V

      - name: Fast check (parallel)
        run: cargo check --workspace --locked --jobs $(nproc)
        env:
          CARGO_INCREMENTAL: 1
          RUSTC_WRAPPER: ""  # Disable sccache if enabled

      - name: Build core services
        run: |
          cargo build --package auth-service --features fast-build --locked
          cargo build --package policy-service --locked
          cargo build --package common --locked

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Clippy (deny warnings)
        run: cargo clippy --workspace --all-targets -- -D warnings -W clippy::perf -W clippy::suspicious

      - name: Run tests (workspace)
        env:
          TEST_MODE: "1"
        run: cargo test --workspace --verbose -- --nocapture

      - name: Install cargo-audit
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-audit

      - name: Run cargo audit
        run: |
          cargo audit --deny warnings
          cargo audit --format json --output-file audit-report.json || true

      - name: Install cargo-deny
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-deny

      - name: Run cargo deny
        run: |
          cargo deny check --all-features
          cargo deny check advisories --format json --output advisories-report.json || true
          cargo deny check licenses --format json --output licenses-report.json || true
          cargo deny check sources --format json --output sources-report.json || true

      - name: Install cargo-outdated
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-outdated

      - name: Check for outdated dependencies
        run: |
          cargo outdated --workspace --format json --output outdated-report.json || true
          # Don't fail CI for outdated deps, just report them

      - name: Install llvm-cov
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-llvm-cov

      - name: Generate coverage report
        env:
          TEST_MODE: "1"
        run: |
          cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info
          cargo llvm-cov --workspace --all-features --json --output-path coverage.json

      - name: Upload coverage to Codecov
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v3
        with:
          file: lcov.info
          fail_ci_if_error: false

      - name: Check coverage baseline
        if: matrix.rust == 'stable' && matrix.os == 'ubuntu-latest'
        env:
          TEST_MODE: "1"
        run: |
          BASELINE_COVERAGE=70
          COVERAGE=$(cargo llvm-cov --workspace --all-features --summary-only | grep -E "^TOTAL" | awk '{print $10}' | sed 's/%//')
          echo "Current coverage: ${COVERAGE}%"
          echo "Baseline: ${BASELINE_COVERAGE}%"
          if (( $(echo "$COVERAGE >= $BASELINE_COVERAGE" | bc -l) )); then
            echo "✅ Coverage meets baseline"
          else
            echo "❌ Coverage below baseline"
            exit 1
          fi
