name: CI Pipeline with Enhanced Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # ===== FAST FEEDBACK JOBS =====

  lint-check:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy -- -D warnings

    - name: Check dependencies for security issues
      run: cargo audit

  # ===== UNIT TESTS =====

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Run unit tests with coverage
      run: |
        cargo install cargo-tarpaulin
        cargo tarpaulin --out Xml --output-dir coverage-reports

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage-reports/cobertura.xml
        flags: unit-tests
        name: Unit Test Coverage

  # ===== INTEGRATION TESTS =====

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run integration tests
      run: cargo test --test integration_tests -- --test-threads=4

    - name: Run cross-service integration tests
      run: cargo test --test auth_policy_cross_service_test -- --test-threads=2

    - name: Run cache integration tests
      run: cargo test --test cache_integration_test

    - name: Run JWT integration tests
      run: cargo test --test jwt_key_management_integration_test

  # ===== SECURITY TESTS =====

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run security-specific tests
      run: cargo test --test advanced_security_testing -- --test-threads=2

    - name: Run injection prevention tests
      run: cargo test test_sql_injection_prevention test_xss_prevention_in_inputs

    - name: Run authentication security tests
      run: cargo test test_password_strength_against_attacks test_email_validation_injection_prevention

  # ===== PERFORMANCE TESTS =====

  performance-tests:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install Criterion
      run: cargo install cargo-criterion

    - name: Run performance benchmarks
      run: cargo criterion --message-format=json | tee benchmark-results.json

    - name: Generate performance report
      run: |
        echo "## Performance Benchmark Results" > performance-report.md
        echo "| Benchmark | Time | Change |" >> performance-report.md
        echo "|-----------|------|--------|" >> performance-report.md
        # Parse benchmark results and add to report
        echo "Performance benchmarks completed successfully" >> performance-report.md

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: |
          benchmark-results.json
          performance-report.md

  # ===== LOAD TESTS =====

  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

      postgres:
        image: postgres:15-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run load tests
      run: cargo test --test load_test -- --test-threads=8

    - name: Run concurrent operation tests
      run: cargo test test_concurrent_cross_service_operations test_concurrent_jwt_operations

  # ===== COMPLIANCE TESTS =====

  compliance-tests:
    name: Compliance & Audit Tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Run compliance validation tests
      run: cargo test test_compliance_and_audit_trails

    - name: Validate audit logging
      run: cargo test test_security_monitoring_and_alerting

    - name: Check security headers
      run: cargo test test_security_headers

  # ===== QUALITY GATE =====

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-check, unit-tests, integration-tests, security-tests]
    if: always()

    steps:
    - name: Check all required tests passed
      run: |
        if [[ "${{ needs.lint-check.result }}" != "success" ]]; then
          echo "❌ Lint checks failed"
          exit 1
        fi

        if [[ "${{ needs.unit-tests.result }}" != "success" ]]; then
          echo "❌ Unit tests failed"
          exit 1
        fi

        if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
          echo "❌ Integration tests failed"
          exit 1
        fi

        if [[ "${{ needs.security-tests.result }}" != "success" ]]; then
          echo "❌ Security tests failed"
          exit 1
        fi

        echo "✅ All quality gates passed!"

  # ===== DEPLOYMENT PREP (if all tests pass) =====

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Build optimized binaries
      run: |
        cargo build --release --package auth-service
        cargo build --release --package policy-service

    - name: Create deployment artifacts
      run: |
        mkdir -p artifacts
        cp target/release/auth-service artifacts/
        cp target/release/policy-service artifacts/

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-artifacts
        path: artifacts/

  # ===== NOTIFICATIONS =====

  notifications:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [quality-gate, build-artifacts]
    if: always()

    steps:
    - name: Send Slack notification
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
