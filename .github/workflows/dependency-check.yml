name: Dependency Check

permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  CARGO_TERM_COLOR: always

jobs:
  dependency-audit:
    name: Dependency Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
      with:
        components: clippy
        
    - name: Cache dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Install audit tools
      run: |
        cargo install cargo-audit --locked || echo "cargo-audit already installed"
        cargo install cargo-machete --locked || echo "cargo-machete already installed"
        cargo install cargo-hack --locked || echo "cargo-hack already installed"
        
    - name: Check for unused dependencies
      run: |
        echo "::group::Unused Dependencies Check"
        cargo machete --with-metadata
        echo "::endgroup::"
        
    - name: Security audit
      run: |
        echo "::group::Security Audit"
        cargo audit
        echo "::endgroup::"
        
    - name: Test feature combinations
      run: |
        echo "::group::Feature Combinations Test"
        cargo hack check --each-feature --workspace --exclude-dev-deps
        echo "::endgroup::"
        
    - name: Clippy check with dependency warnings
      run: |
        echo "::group::Clippy Dependency Check"
        cargo clippy --workspace --all-targets -- -W unused-crate-dependencies -W unused-imports
        echo "::endgroup::"

  dependency-update-check:
    name: Dependency Update Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
      
    - name: Install cargo-outdated
      run: cargo install cargo-outdated --locked
      
    - name: Check for outdated dependencies
      run: |
        echo "::group::Outdated Dependencies"
        cargo outdated --workspace
        echo "::endgroup::"
        
    - name: Create issue for outdated dependencies
      if: failure()
      uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
      with:
        script: |
          const title = 'ðŸ“¦ Outdated Dependencies Detected';
          const body = `
          ## Outdated Dependencies Found
          
          The scheduled dependency check found outdated packages in the workspace.
          
          ### Actions Required:
          - [ ] Review outdated dependencies
          - [ ] Update compatible versions
          - [ ] Test for breaking changes
          - [ ] Update security-critical dependencies first
          
          ### Commands:
          \`\`\`bash
          # Check what's outdated
          cargo outdated --workspace
          
          # Update dependencies
          cargo update
          
          # Test changes
          cargo test --workspace
          \`\`\`
          
          **Auto-generated by dependency-check workflow**
          `;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['dependencies', 'maintenance']
          });

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: dependency-audit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      
    - name: Setup Rust
      uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable
      
    - name: Cache dependencies
      uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build workspace
      run: |
        echo "::group::Workspace Build"
        cargo build --workspace --all-targets
        echo "::endgroup::"
        
    - name: Run tests
      run: |
        echo "::group::Test Suite"
        cargo test --workspace --no-fail-fast
        echo "::endgroup::"
        
    - name: Build release
      run: |
        echo "::group::Release Build"
        cargo build --workspace --release
        echo "::endgroup::"
        
    - name: Verify binary sizes
      run: |
        echo "::group::Binary Sizes"
        ls -lh target/release/auth-service target/release/policy-service || true
        echo "::endgroup::"