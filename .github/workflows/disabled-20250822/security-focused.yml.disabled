name: Security & Compliance Pipeline

on:
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  push:
    branches: [ main ]
    paths:
      - '**/*.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'
      - '.github/workflows/security-focused.yml'
  pull_request:
    branches: [ main ]
    paths:
      - '**/*.rs'
      - '**/Cargo.toml'
      - '**/Cargo.lock'

permissions:
  contents: read
  security-events: write
  actions: read

env:
  CARGO_TERM_COLOR: always

jobs:
  security-audit:
    name: Security Audit & Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3

      - name: Install security tools
        run: |
          cargo install cargo-audit --locked
          cargo install cargo-deny --locked
          cargo install cargo-geiger --locked

      - name: Run comprehensive security audit
        run: |
          echo "üîí Running comprehensive security audit..."
          
          # Audit for known vulnerabilities
          echo "Checking for known vulnerabilities..."
          cargo audit --deny warnings
          
          # Check dependency policies
          echo "Checking dependency policies..."
          cargo deny check advisories
          
          # Scan for unsafe code
          echo "Scanning for unsafe code..."
          cargo geiger --all-features --all-targets --output-format GitHub --fail-threshold 0

      - name: Advanced filesystem scan
        uses: aquasecurity/trivy-action@7c2007bcb556501da015201bcba5aa14069b74e2 # 0.23.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-security-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@e675ced7a7522a761fc9c8eb26682c8b27c42b2b # v3.25.1
        if: always()
        with:
          sarif_file: 'trivy-security-results.sarif'

  compliance-check:
    name: NIST 800-53 Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Python
        uses: actions/setup-python@82c7e631bb3cdc910f68e0081d67478d79c6982d # v5.1.0
        with:
          python-version: '3.11'

      - name: Run NIST 800-53 compliance check
        run: |
          echo "üõ°Ô∏è  Running NIST 800-53 compliance check..."
          python3 scripts/compliance/nist-800-53-check.py .

      - name: Upload compliance report
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        if: always()
        with:
          name: compliance-report
          path: compliance-report.txt
          retention-days: 30

  dependency-security:
    name: Dependency Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@21dc36fb71dd22e3317045c0c31a3f4249868b17 # stable

      - name: Cache cargo
        uses: Swatinem/rust-cache@23bce251a8cd2ffc3c1075eaa2367cf899916d84 # v2.7.3

      - name: Run dependency security checks
        run: |
          echo "üì¶ Running dependency security analysis..."
          
          # Check if security audit script exists and run it
          if [ -f "scripts/security-audit.sh" ]; then
            chmod +x scripts/security-audit.sh
            ./scripts/security-audit.sh
          fi
          
          # Check for outdated dependencies with security implications
          cargo install cargo-outdated --locked
          cargo outdated --workspace --exit-code 1 || {
            echo "‚ö†Ô∏è  Outdated dependencies found - review for security updates"
          }

      - name: Dependency review
        uses: actions/dependency-review-action@72eb03d02c7872a771aacd928f3123ac62ad6d3a # v4.3.3
        if: github.event_name == 'pull_request'

  secret-scanning:
    name: Secret & Credential Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          fetch-depth: 0  # Full history for secret scanning

      - name: Run secret scanning
        run: |
          echo "üîç Scanning for secrets and credentials..."
          
          # Basic secret patterns
          echo "Checking for common secret patterns..."
          if grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]{8,}" --include="*.rs" --include="*.toml" --include="*.yaml" .; then
            echo "‚ö†Ô∏è  Potential hardcoded secrets found - review carefully"
          fi
          
          # Check for API keys
          if grep -r -E "(api[_-]?key|access[_-]?token)" --include="*.rs" --include="*.toml" .; then
            echo "‚ö†Ô∏è  API key references found - ensure they're properly externalized"
          fi
          
          # Check for database URLs with credentials
          if grep -r -E "postgres://.*:.*@" --include="*.rs" --include="*.toml" .; then
            echo "‚ùå Database URLs with embedded credentials found!"
            exit 1
          fi
          
          echo "‚úÖ Secret scanning completed"

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0

      - name: Build containers for security scanning
        run: |
          echo "üê≥ Building containers for security scanning..."
          
          # Build policy-service container if Dockerfile exists
          if [ -f "policy-service/Dockerfile" ]; then
            docker build -f policy-service/Dockerfile -t policy-service:security-scan .
          fi
          
          # Try to build auth-service container
          if [ -f "auth-service/Dockerfile" ]; then
            docker build -f auth-service/Dockerfile -t auth-service:security-scan . || {
              echo "‚ö†Ô∏è  auth-service container build failed - skipping container scan"
            }
          elif [ -f "auth-service/Dockerfile.prod" ]; then
            docker build -f auth-service/Dockerfile.prod -t auth-service:security-scan . || {
              echo "‚ö†Ô∏è  auth-service container build failed - skipping container scan"
            }
          fi

      - name: Comprehensive container security scan
        run: |
          echo "üîç Running comprehensive container security scans..."
          
          for image in policy-service:security-scan auth-service:security-scan; do
            if docker images | grep -q "$image"; then
              echo "Scanning $image..."
              
              # Vulnerability scan
              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                aquasec/trivy:latest image --exit-code 0 --severity HIGH,CRITICAL "$image"
              
              # Configuration scan
              docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
                aquasec/trivy:latest config --exit-code 0 "$image" || true
              
            else
              echo "‚ö†Ô∏è  Image $image not found - skipping scan"
            fi
          done

  security-summary:
    name: Security Pipeline Summary
    runs-on: ubuntu-latest
    needs: [security-audit, compliance-check, dependency-security, secret-scanning, container-security]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: Security Summary
        run: |
          echo "üõ°Ô∏è  Security Pipeline Summary"
          echo "============================="
          
          echo "Security Audit: ${{ needs.security-audit.result }}"
          echo "Compliance Check: ${{ needs.compliance-check.result }}"
          echo "Dependency Security: ${{ needs.dependency-security.result }}"
          echo "Secret Scanning: ${{ needs.secret-scanning.result }}"
          echo "Container Security: ${{ needs.container-security.result }}"
          
          # Determine overall security status
          failed_jobs=0
          
          [[ "${{ needs.security-audit.result }}" == "failure" ]] && ((failed_jobs++))
          [[ "${{ needs.compliance-check.result }}" == "failure" ]] && ((failed_jobs++))
          [[ "${{ needs.dependency-security.result }}" == "failure" ]] && ((failed_jobs++))
          [[ "${{ needs.secret-scanning.result }}" == "failure" ]] && ((failed_jobs++))
          [[ "${{ needs.container-security.result }}" == "failure" ]] && ((failed_jobs++))
          
          echo ""
          if [ $failed_jobs -eq 0 ]; then
            echo "‚úÖ Security Status: PASSED - All security checks successful"
          elif [ $failed_jobs -le 2 ]; then
            echo "‚ö†Ô∏è  Security Status: ATTENTION NEEDED - $failed_jobs security issues found"
          else
            echo "‚ùå Security Status: CRITICAL - $failed_jobs security issues found"
            exit 1
          fi
          
          echo ""
          echo "üîí Security recommendations:"
          echo "‚Ä¢ Regularly update dependencies"
          echo "‚Ä¢ Monitor security advisories"
          echo "‚Ä¢ Review compliance reports"
          echo "‚Ä¢ Implement security best practices"
