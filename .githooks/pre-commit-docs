#!/bin/bash
#
# Pre-commit hook for validating documentation examples

set -e

echo "üîç Running pre-commit documentation validation..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Check if any documentation files were changed
DOCS_CHANGED=$(git diff --cached --name-only | grep -E '\.(md|rs)$' || true)

if [ -z "$DOCS_CHANGED" ]; then
    echo "üìù No documentation files changed, skipping validation"
    exit 0
fi

echo "üìã Documentation files changed:"
echo "$DOCS_CHANGED" | sed 's/^/  - /'

# Validate Rust code blocks in markdown
validate_rust_examples() {
    echo "ü¶Ä Validating Rust code examples..."
    local has_errors=0
    
    for file in $(echo "$DOCS_CHANGED" | grep '\.md$' || true); do
        if [ -f "$file" ] && grep -q '```rust' "$file"; then
            echo "  üìù Checking $file..."
            local rust_blocks=$(grep -n '```rust' "$file" | wc -l)
            local rust_end_blocks=$(grep -n '```' "$file" | wc -l)
            
            if [ $((rust_end_blocks % 2)) -ne 0 ]; then
                echo -e "  ${RED}‚ùå Unmatched code blocks in $file${NC}"
                has_errors=1
            else
                echo "  ‚úÖ Code blocks properly closed in $file"
            fi
        fi
    done
    return $has_errors
}

# Run documentation tests
run_doc_tests() {
    echo "üß™ Running documentation tests..."
    
    # Test our custom documentation test files
    echo "  üìã Testing documentation examples..."
    if ! cargo test documentation_examples --quiet 2>/dev/null; then
        echo -e "  ${RED}‚ùå Documentation example tests failed${NC}"
        return 1
    fi
    
    if ! cargo test doctest_examples --quiet 2>/dev/null; then
        echo -e "  ${RED}‚ùå Doctest example tests failed${NC}"
        return 1
    fi
    
    echo "  ‚úÖ Documentation tests passed"
    return 0
}

# Check for documentation quality issues
check_doc_quality() {
    echo "üìä Checking documentation quality..."
    
    for file in $(echo "$DOCS_CHANGED" | grep '\.md$' || true); do
        if [ -f "$file" ]; then
            # Check for TODO/FIXME markers
            if grep -q -E '(TODO|FIXME|XXX):' "$file"; then
                echo -e "  ${YELLOW}‚ö†Ô∏è  Found TODO/FIXME markers in $file${NC}"
                grep -n -E '(TODO|FIXME|XXX):' "$file" | head -3 | sed 's/^/    /'
            fi
            
            # Check for very long lines in code blocks
            if grep -q '```' "$file"; then
                local in_code_block=false
                local line_num=0
                while IFS= read -r line; do
                    line_num=$((line_num + 1))
                    if [[ "$line" == \`\`\`* ]]; then
                        if [ "$in_code_block" = true ]; then
                            in_code_block=false
                        else
                            in_code_block=true
                        fi
                    elif [ "$in_code_block" = true ] && [ ${#line} -gt 120 ]; then
                        echo -e "  ${YELLOW}‚ö†Ô∏è  Long line in code block at $file:$line_num (${#line} chars)${NC}"
                    fi
                done < "$file"
            fi
        fi
    done
    return 0
}

# Main validation
main() {
    local exit_code=0
    
    if ! validate_rust_examples; then
        exit_code=1
    fi
    
    if ! run_doc_tests; then
        exit_code=1
    fi
    
    # Quality checks are warnings only
    check_doc_quality || true
    
    if [ $exit_code -eq 0 ]; then
        echo -e "${GREEN}‚úÖ All documentation validation checks passed!${NC}"
    else
        echo -e "${RED}‚ùå Documentation validation failed${NC}"
        echo
        echo "üí° Tips to fix documentation issues:"
        echo "  - Run 'cargo test documentation_examples' to test examples"
        echo "  - Run 'cargo test --doc' to test inline documentation"
        echo "  - Check that all code blocks are properly closed"
        echo "  - Ensure examples use correct API signatures"
    fi
    
    exit $exit_code
}

main "$@"