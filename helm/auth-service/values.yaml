# Default values for auth-service
replicaCount: 3

image:
  repository: rust-security/auth-service
  pullPolicy: IfNotPresent
  tag: "1.0.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""
  # Disable service account token automounting for security
  automountServiceAccountToken: false

podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/metrics"

podSecurityContext:
  fsGroup: 2000
  runAsNonRoot: true
  runAsUser: 1000
  seccompProfile:
    type: RuntimeDefault

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  type: ClusterIP
  port: 8080
  targetPort: 8080
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"
    prometheus.io/path: "/metrics"

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: auth.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: auth-service-tls
      hosts:
        - auth.example.com

resources:
  limits:
    cpu: 1000m
    memory: 512Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  
  # Advanced HPA v2 configuration
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # 5 minutes
      percentPolicy: 50               # Max 50% scale down
      podsPolicy: 2                   # Max 2 pods scale down
      periodSeconds: 60               # Check every minute
      selectPolicy: "Min"             # Choose minimum of policies
    scaleUp:
      stabilizationWindowSeconds: 60   # 1 minute
      percentPolicy: 100              # Max 100% scale up
      podsPolicy: 4                   # Max 4 pods scale up
      periodSeconds: 60               # Check every minute
      selectPolicy: "Max"             # Choose maximum of policies
  
  # Custom metrics (optional)
  customMetrics: []
    # Example: Scale based on request rate
    # - type: "Pods"
    #   metric:
    #     name: "http_requests_per_second"
    #   target:
    #     type: "AverageValue"
    #     averageValue: "100"
    # Example: Scale based on queue depth
    # - type: "External"
    #   metric:
    #     name: "redis_queue_depth"
    #     selector:
    #       matchLabels:
    #         queue: "auth-tasks"
    #   target:
    #     type: "Value"
    #     value: "50"

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - auth-service
        topologyKey: kubernetes.io/hostname

# Application configuration
config:
  environment: production
  logLevel: info
  bindAddr: "0.0.0.0:8080"
  tokenExpirySeconds: 3600
  rateLimitRequestsPerMinute: 120
  allowedOrigins: "https://app.example.com,https://admin.example.com"
  
  # External services
  jaegerEndpoint: "http://jaeger-collector:14268/api/traces"
  
  # Security settings
  jwtSecret: ""  # Will be set from secret
  clientCredentials: ""  # Will be set from secret
  requestSigningSecret: ""  # Will be set from secret
  
  # Google OAuth (optional)
  googleClientId: ""
  googleClientSecret: ""
  googleRedirectUri: "https://auth.example.com/oauth/google/callback"

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: true
    password: "redis-password"
  master:
    persistence:
      enabled: true
      size: 8Gi
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 8Gi

# PostgreSQL configuration (if needed for future features)
postgresql:
  enabled: false
  auth:
    postgresPassword: "postgres-password"
    database: "auth_service"
  primary:
    persistence:
      enabled: true
      size: 20Gi

# Secrets configuration
secrets:
  # Static secrets (only used when externalSecrets.enabled = false)
  # WARNING: Do not use these in production - use ExternalSecrets instead
  jwtSecret: "your-super-secret-jwt-key-change-in-production"
  clientCredentials: "client1:secret1;client2:secret2"
  requestSigningSecret: "your-request-signing-secret"
  redisPassword: "redis-password"
  googleClientSecret: ""
  databaseUrl: ""

# External Secrets configuration
externalSecrets:
  # Enable External Secrets Operator integration
  enabled: false
  
  # Refresh interval for secret updates
  refreshInterval: "15m"
  
  # Create SecretStore resource (set to false if using ClusterSecretStore)
  createSecretStore: true
  
  # SecretStore reference
  secretStore:
    name: "auth-service-secret-store"
    kind: "SecretStore"  # or "ClusterSecretStore"
  
  # Additional annotations for the ExternalSecret
  annotations: {}
  
  # Secret provider configuration
  provider:
    # Supported types: vault, aws, gcp
    type: "vault"
    
    # Vault configuration
    vault:
      server: "https://vault.example.com"
      path: "secret"
      version: "v2"
      auth:
        # Token-based auth (for development)
        tokenSecretRef:
          name: "vault-token"
          key: "token"
        # Kubernetes auth (recommended for production)
        # kubernetes:
        #   mountPath: "auth/kubernetes"
        #   role: "rust-security-role"
        #   serviceAccountRef:
        #     name: "auth-service"
      # TLS configuration
      caProvider:
        type: "ConfigMap"
        name: "vault-ca-cert"
        key: "ca.crt"
    
    # AWS Secrets Manager configuration
    aws:
      region: "us-west-2"
      auth:
        # IAM Role for Service Accounts (recommended)
        jwt:
          serviceAccountRef:
            name: "auth-service-aws-sa"
        # Access key based auth (not recommended)
        # secretRef:
        #   accessKeyIDSecretRef:
        #     name: "aws-credentials"
        #     key: "access-key-id"
        #   secretAccessKeySecretRef:
        #     name: "aws-credentials"
        #     key: "secret-access-key"
    
    # Google Secret Manager configuration
    gcp:
      projectId: "your-gcp-project-id"
      auth:
        # Workload Identity (recommended)
        workloadIdentity:
          clusterLocation: "us-central1"
          clusterName: "rust-security-cluster"
          serviceAccountRef:
            name: "auth-service-gcp-sa"
        # Service account key (not recommended)
        # secretRef:
        #   secretAccessKey:
        #     name: "gcp-credentials"
        #     key: "service-account-key"
  
  # Secret mappings from external store to Kubernetes secret keys
  secrets:
    - secretKey: "jwt-secret"
      remoteRef:
        key: "auth-service/jwt"
        property: "secret"
    - secretKey: "client-credentials" 
      remoteRef:
        key: "auth-service/clients"
        property: "credentials"
    - secretKey: "request-signing-secret"
      remoteRef:
        key: "auth-service/signing" 
        property: "secret"
    - secretKey: "google-client-secret"
      remoteRef:
        key: "auth-service/oauth/google"
        property: "client_secret"
    - secretKey: "redis-password"
      remoteRef:
        key: "auth-service/redis"
        property: "password"

# Health checks
healthCheck:
  enabled: true
  path: /health
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# Monitoring
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
    labels:
      app: auth-service

# Network policies
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      ports:
      - protocol: TCP
        port: 8080
    - from:
      - namespaceSelector:
          matchLabels:
            name: monitoring
      ports:
      - protocol: TCP
        port: 8080
  egress:
    - to:
      - namespaceSelector:
          matchLabels:
            name: kube-system
      ports:
      - protocol: TCP
        port: 53
      - protocol: UDP
        port: 53
    - to: []
      ports:
      - protocol: TCP
        port: 6379  # Redis
      - protocol: TCP
        port: 443   # HTTPS
      - protocol: TCP
        port: 14268 # Jaeger

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2
  # Alternative: Use maxUnavailable instead of minAvailable
  # maxUnavailable: 1
  # maxUnavailable: "33%"  # Allow at most 33% of pods to be unavailable
