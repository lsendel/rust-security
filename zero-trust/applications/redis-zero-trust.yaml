apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: rust-security-zt
  labels:
    app: redis
    version: v1
    security.istio.io/tlsMode: istio
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
      version: v1
  template:
    metadata:
      labels:
        app: redis
        version: v1
        security.istio.io/tlsMode: istio
      annotations:
        sidecar.istio.io/inject: "true"
        sidecar.istio.io/proxyCPU: "50m"
        sidecar.istio.io/proxyMemory: "128Mi"
        spiffe.io/spiffe-id: spiffe://zero-trust.local/redis
    spec:
      serviceAccountName: redis
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: redis
        image: redis:7.2-alpine
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        command:
        - redis-server
        - /etc/redis/redis.conf
        env:
        - name: REDIS_REPLICATION_MODE
          value: master
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-auth
              key: password
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis
          readOnly: true
        - name: redis-data
          mountPath: /data
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: rust-security-zt
  labels:
    app: redis
    service: redis
spec:
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app: redis
  type: ClusterIP
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis
  namespace: rust-security-zt
  labels:
    app: redis
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: rust-security-zt
data:
  redis.conf: |
    # Network security
    bind 0.0.0.0
    port 6379
    protected-mode yes
    
    # Authentication
    requirepass ${REDIS_PASSWORD}
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    
    # Memory management
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    
    # Security settings
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    rename-command KEYS ""
    rename-command CONFIG ""
    rename-command SHUTDOWN REDIS_SHUTDOWN
    rename-command DEBUG ""
    rename-command EVAL ""
    rename-command SCRIPT ""
    
    # Logging
    loglevel notice
    logfile ""
    syslog-enabled yes
    syslog-ident redis
    
    # Client settings
    timeout 300
    tcp-keepalive 300
    tcp-backlog 511
    
    # Memory optimization
    hash-max-ziplist-entries 512
    hash-max-ziplist-value 64
    list-max-ziplist-size -2
    list-compress-depth 0
    set-max-intset-entries 512
    zset-max-ziplist-entries 128
    zset-max-ziplist-value 64
    
    # Security enhancements
    enable-protected-configs yes
    enable-debug-command no
    enable-module-command no
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-auth
  namespace: rust-security-zt
type: Opaque
data:
  password: <base64-encoded-redis-password>
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-zero-trust-netpol
  namespace: rust-security-zt
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
  - Ingress
  - Egress
  ingress:
  # Only allow traffic from auth-service
  - from:
    - podSelector:
        matchLabels:
          app: auth-service
    ports:
    - protocol: TCP
      port: 6379
  # Allow monitoring
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 6379
  egress:
  # Allow DNS only
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: redis-zero-trust-authz
  namespace: rust-security-zt
spec:
  selector:
    matchLabels:
      app: redis
  action: ALLOW
  rules:
  # Only allow auth-service to access Redis
  - from:
    - source:
        principals:
        - "cluster.local/ns/rust-security-zt/sa/auth-service"
    to:
    - operation:
        ports: ["6379"]
    when:
    - key: source.certificate_fingerprint
      values: ["*"]
  # Allow monitoring access
  - from:
    - source:
        principals:
        - "cluster.local/ns/monitoring/sa/prometheus"
        - "cluster.local/ns/monitoring/sa/redis-exporter"
    to:
    - operation:
        ports: ["6379"]
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-exporter
  namespace: rust-security-zt
  labels:
    app: redis-exporter
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-exporter
  template:
    metadata:
      labels:
        app: redis-exporter
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: redis-exporter
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      containers:
      - name: redis-exporter
        image: oliver006/redis_exporter:v1.55.0
        ports:
        - containerPort: 9121
          name: metrics
        env:
        - name: REDIS_ADDR
          value: "redis://redis.rust-security-zt:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-auth
              key: password
        - name: REDIS_EXPORTER_CHECK_KEYS
          value: "auth:*,session:*"
        - name: REDIS_EXPORTER_CHECK_SINGLE_KEYS
          value: "auth:active_sessions,auth:failed_attempts"
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis-exporter
  namespace: rust-security-zt
---
apiVersion: v1
kind: Service
metadata:
  name: redis-exporter
  namespace: rust-security-zt
  labels:
    app: redis-exporter
spec:
  ports:
  - port: 9121
    targetPort: 9121
    name: metrics
  selector:
    app: redis-exporter
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: redis-monitor
  namespace: rust-security-zt
  labels:
    app: redis
spec:
  selector:
    matchLabels:
      app: redis-exporter
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics