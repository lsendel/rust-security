apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: spire-server
  namespace: spire-system
  labels:
    app: spire-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spire-server
  serviceName: spire-server
  template:
    metadata:
      namespace: spire-system
      labels:
        app: spire-server
    spec:
      serviceAccountName: spire-server
      shareProcessNamespace: true
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: spire-server
        image: gcr.io/spiffe-io/spire-server:1.8.2
        args:
        - -config
        - /run/spire/config/server.conf
        ports:
        - containerPort: 8081
        volumeMounts:
        - name: spire-config
          mountPath: /run/spire/config
          readOnly: true
        - name: spire-data
          mountPath: /run/spire/data
        - name: spire-registration-socket
          mountPath: /run/spire/sockets
        - name: spire-server-socket
          mountPath: /run/spire/server-sockets
        livenessProbe:
          httpGet:
            path: /live
            port: 8080
          failureThreshold: 2
          initialDelaySeconds: 15
          periodSeconds: 60
          timeoutSeconds: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      - name: spire-controller-manager
        image: gcr.io/spiffe-io/spire-controller-manager:0.3.0
        ports:
        - containerPort: 9443
        args:
        - --config=controller-manager-config.yaml
        volumeMounts:
        - name: spire-controller-manager-config
          mountPath: /controller-manager-config.yaml
          subPath: controller-manager-config.yaml
        - name: spire-registration-socket
          mountPath: /run/spire/sockets
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: spire-config
        configMap:
          name: spire-server
      - name: spire-controller-manager-config
        configMap:
          name: spire-controller-manager-config
      - name: spire-registration-socket
        emptyDir: {}
      - name: spire-server-socket
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: spire-data
      namespace: spire-system
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: spire-server
  namespace: spire-system
spec:
  type: NodePort
  ports:
  - name: grpc
    port: 8081
    targetPort: 8081
    protocol: TCP
  selector:
    app: spire-server
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-server
  namespace: spire-system
data:
  server.conf: |
    server {
      bind_address = "0.0.0.0"
      bind_port = "8081"
      socket_path = "/run/spire/sockets/spire-registration.sock"
      trust_domain = "zero-trust.local"
      data_dir = "/run/spire/data"
      log_level = "INFO"
      ca_key_type = "rsa-2048"
      default_x509_svid_ttl = "1h"
      ca_ttl = "12h"
      jwt_issuer = "https://auth.zero-trust.local"
      
      ca_subject = {
        country = ["US"],
        organization = ["Zero Trust"],
        common_name = "Zero Trust CA",
      }
    }

    plugins {
      DataStore "sql" {
        plugin_data {
          database_type = "sqlite3"
          connection_string = "/run/spire/data/datastore.sqlite3"
        }
      }

      NodeAttestor "k8s_sat" {
        plugin_data {
          clusters = {
            "zero-trust-cluster" = {
              use_token_review_api_validation = true
              service_account_allow_list = ["spire-system:spire-agent"]
            }
          }
        }
      }

      KeyManager "disk" {
        plugin_data {
          keys_path = "/run/spire/data/keys.json"
        }
      }

      Notifier "k8sbundle" {
        plugin_data {
          namespace = "spire-system"
          config_map = "trust-bundle"
          config_map_key = "trust-bundle.pem"
        }
      }

      UpstreamAuthority "disk" {
        plugin_data {
          key_file_path = "/run/spire/data/upstream_ca.key"
          cert_file_path = "/run/spire/data/upstream_ca.crt"
        }
      }
    }

    health_checks {
      listener_enabled = true
      bind_address = "0.0.0.0"
      bind_port = "8080"
      live_path = "/live"
      ready_path = "/ready"
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-controller-manager-config
  namespace: spire-system
data:
  controller-manager-config.yaml: |
    apiVersion: spire.spiffe.io/v1alpha1
    kind: ControllerManagerConfig
    metrics:
      bindAddress: 0.0.0.0:8082
    healthProbe:
      bindAddress: 0.0.0.0:8083
    leaderElection:
      leaderElect: true
      resourceName: spire-controller-manager
      resourceNamespace: spire-system
    spireServerSocketPath: /run/spire/sockets/spire-registration.sock
    className: "zero-trust-spire"
    trustDomain: "zero-trust.local"
    ignoreNamespaces: ["kube-system", "kube-public", "local-path-storage"]
    clusterSPIFFEIDs:
    - className: "zero-trust-spire"
      autoPopulateDNSNames: true
      dnsNameTemplates:
      - "{{ .Service }}.{{ .Namespace }}.svc.cluster.local"
      - "{{ .Service }}.{{ .Namespace }}"
      workloadSelectorTemplates:
      - "k8s:ns:{{ .Namespace }}"
      - "k8s:sa:{{ .ServiceAccount }}"
      federatesWith: ["other-trust-domain.local"]