#!/bin/bash

# Vulnerability Database Synchronization Script
# Integrates with multiple vulnerability databases for comprehensive coverage

set -euo pipefail

# Configuration
VULNDB_DIR="/var/lib/security/vulndb"
LOG_FILE="/var/log/security/vulndb-sync.log"
METRICS_FILE="/var/lib/prometheus/vulndb-metrics.prom"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Error handling
error_exit() {
    echo -e "${RED}ERROR: $1${NC}" >&2
    log "ERROR: $1"
    exit 1
}

# Success message
success() {
    echo -e "${GREEN}✓ $1${NC}"
    log "SUCCESS: $1"
}

# Warning message
warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
    log "WARNING: $1"
}

# Initialize directories
initialize_directories() {
    log "Initializing vulnerability database directories"
    
    mkdir -p "$VULNDB_DIR"/{nvd,rustsec,ghsa,osv,cisa}
    mkdir -p "$(dirname "$LOG_FILE")"
    mkdir -p "$(dirname "$METRICS_FILE")"
    
    success "Directories initialized"
}

# Sync NVD (National Vulnerability Database)
sync_nvd() {
    log "Syncing NVD database"
    
    local nvd_dir="$VULNDB_DIR/nvd"
    local current_year=$(date +%Y)
    local start_year=2002
    
    for year in $(seq $start_year $current_year); do
        local feed_url="https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-${year}.json.gz"
        local feed_file="$nvd_dir/nvdcve-1.1-${year}.json.gz"
        
        echo -n "  Downloading CVE data for $year... "
        if curl -sL -o "$feed_file" "$feed_url"; then
            gunzip -f "$feed_file"
            echo "✓"
        else
            echo "✗"
            warning "Failed to download NVD feed for $year"
        fi
    done
    
    success "NVD database synced"
}

# Sync RustSec Advisory Database
sync_rustsec() {
    log "Syncing RustSec advisory database"
    
    local rustsec_dir="$VULNDB_DIR/rustsec"
    
    if [ -d "$rustsec_dir/advisory-db" ]; then
        cd "$rustsec_dir/advisory-db"
        git pull --quiet
    else
        git clone --quiet https://github.com/RustSec/advisory-db.git "$rustsec_dir/advisory-db"
    fi
    
    # Parse and index advisories
    find "$rustsec_dir/advisory-db" -name "*.md" -type f | while read -r advisory; do
        local id=$(basename "$advisory" .md)
        local severity=$(grep -oP '(?<=severity = ")[^"]+' "$advisory" 2>/dev/null || echo "unknown")
        echo "$id,$severity" >> "$rustsec_dir/index.csv"
    done
    
    success "RustSec database synced"
}

# Sync GitHub Security Advisories
sync_ghsa() {
    log "Syncing GitHub Security Advisory database"
    
    local ghsa_dir="$VULNDB_DIR/ghsa"
    local ghsa_repo="https://github.com/github/advisory-database.git"
    
    if [ -d "$ghsa_dir/advisory-database" ]; then
        cd "$ghsa_dir/advisory-database"
        git pull --quiet
    else
        git clone --quiet --depth 1 "$ghsa_repo" "$ghsa_dir/advisory-database"
    fi
    
    # Count advisories by ecosystem
    local rust_count=$(find "$ghsa_dir/advisory-database" -path "*/rust/*.json" | wc -l)
    local npm_count=$(find "$ghsa_dir/advisory-database" -path "*/npm/*.json" | wc -l)
    local pypi_count=$(find "$ghsa_dir/advisory-database" -path "*/pypi/*.json" | wc -l)
    
    log "GHSA stats: Rust=$rust_count, NPM=$npm_count, PyPI=$pypi_count"
    success "GitHub Security Advisories synced"
}

# Sync OSV (Open Source Vulnerabilities)
sync_osv() {
    log "Syncing OSV database"
    
    local osv_dir="$VULNDB_DIR/osv"
    local ecosystems=("crates.io" "PyPI" "npm")
    
    for ecosystem in "${ecosystems[@]}"; do
        local ecosystem_dir="$osv_dir/$ecosystem"
        mkdir -p "$ecosystem_dir"
        
        echo -n "  Syncing $ecosystem... "
        local osv_url="https://osv-vulnerabilities.storage.googleapis.com/${ecosystem}/all.zip"
        
        if curl -sL -o "$ecosystem_dir/all.zip" "$osv_url"; then
            unzip -q -o "$ecosystem_dir/all.zip" -d "$ecosystem_dir"
            rm "$ecosystem_dir/all.zip"
            echo "✓"
        else
            echo "✗"
            warning "Failed to sync OSV for $ecosystem"
        fi
    done
    
    success "OSV database synced"
}

# Sync CISA Known Exploited Vulnerabilities
sync_cisa() {
    log "Syncing CISA Known Exploited Vulnerabilities catalog"
    
    local cisa_dir="$VULNDB_DIR/cisa"
    local cisa_url="https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json"
    
    if curl -sL -o "$cisa_dir/known_exploited.json" "$cisa_url"; then
        # Extract CVE IDs for quick lookup
        jq -r '.vulnerabilities[].cveID' "$cisa_dir/known_exploited.json" > "$cisa_dir/cve_list.txt"
        success "CISA KEV catalog synced"
    else
        error_exit "Failed to sync CISA KEV catalog"
    fi
}

# Generate metrics for Prometheus
generate_metrics() {
    log "Generating metrics"
    
    {
        echo "# HELP vulndb_sync_timestamp Last successful sync timestamp"
        echo "# TYPE vulndb_sync_timestamp gauge"
        echo "vulndb_sync_timestamp $(date +%s)"
        
        echo "# HELP vulndb_advisory_count Number of advisories by source"
        echo "# TYPE vulndb_advisory_count gauge"
        
        # Count advisories
        local nvd_count=$(find "$VULNDB_DIR/nvd" -name "*.json" 2>/dev/null | wc -l)
        local rustsec_count=$(find "$VULNDB_DIR/rustsec" -name "*.md" 2>/dev/null | wc -l)
        local ghsa_count=$(find "$VULNDB_DIR/ghsa" -name "*.json" 2>/dev/null | wc -l)
        local osv_count=$(find "$VULNDB_DIR/osv" -name "*.json" 2>/dev/null | wc -l)
        local cisa_count=$([ -f "$VULNDB_DIR/cisa/cve_list.txt" ] && wc -l < "$VULNDB_DIR/cisa/cve_list.txt" || echo 0)
        
        echo "vulndb_advisory_count{source=\"nvd\"} $nvd_count"
        echo "vulndb_advisory_count{source=\"rustsec\"} $rustsec_count"
        echo "vulndb_advisory_count{source=\"ghsa\"} $ghsa_count"
        echo "vulndb_advisory_count{source=\"osv\"} $osv_count"
        echo "vulndb_advisory_count{source=\"cisa_kev\"} $cisa_count"
        
        echo "# HELP vulndb_sync_duration_seconds Time taken to sync each source"
        echo "# TYPE vulndb_sync_duration_seconds gauge"
    } > "$METRICS_FILE"
    
    success "Metrics generated at $METRICS_FILE"
}

# Check for vulnerabilities in project
check_vulnerabilities() {
    log "Checking for vulnerabilities in current project"
    
    local vuln_count=0
    local critical_count=0
    local high_count=0
    
    # Check Rust dependencies
    if [ -f "Cargo.lock" ]; then
        echo "Checking Rust dependencies..."
        if cargo audit --json 2>/dev/null | jq -r '.vulnerabilities.list[]' > /tmp/rust_vulns.json; then
            vuln_count=$(jq -s 'length' /tmp/rust_vulns.json)
            critical_count=$(jq -s '[.[] | select(.advisory.severity == "critical")] | length' /tmp/rust_vulns.json)
            high_count=$(jq -s '[.[] | select(.advisory.severity == "high")] | length' /tmp/rust_vulns.json)
        fi
    fi
    
    # Check Python dependencies
    if [ -f "requirements.txt" ]; then
        echo "Checking Python dependencies..."
        if safety check --json 2>/dev/null > /tmp/python_vulns.json; then
            local py_vulns=$(jq '.vulnerabilities | length' /tmp/python_vulns.json)
            vuln_count=$((vuln_count + py_vulns))
        fi
    fi
    
    # Check Node.js dependencies
    if [ -f "package-lock.json" ]; then
        echo "Checking Node.js dependencies..."
        if npm audit --json 2>/dev/null > /tmp/npm_vulns.json; then
            local npm_vulns=$(jq '.metadata.vulnerabilities.total' /tmp/npm_vulns.json)
            vuln_count=$((vuln_count + npm_vulns))
        fi
    fi
    
    # Report findings
    if [ $vuln_count -eq 0 ]; then
        success "No vulnerabilities found!"
    else
        warning "Found $vuln_count vulnerabilities (Critical: $critical_count, High: $high_count)"
    fi
    
    # Update metrics
    {
        echo "# HELP project_vulnerabilities Current vulnerabilities in project"
        echo "# TYPE project_vulnerabilities gauge"
        echo "project_vulnerabilities{severity=\"total\"} $vuln_count"
        echo "project_vulnerabilities{severity=\"critical\"} $critical_count"
        echo "project_vulnerabilities{severity=\"high\"} $high_count"
    } >> "$METRICS_FILE"
}

# Main execution
main() {
    echo "========================================="
    echo "   Vulnerability Database Sync Tool"
    echo "========================================="
    echo ""
    
    log "Starting vulnerability database synchronization"
    
    # Check for required tools
    command -v jq >/dev/null 2>&1 || error_exit "jq is required but not installed"
    command -v git >/dev/null 2>&1 || error_exit "git is required but not installed"
    command -v curl >/dev/null 2>&1 || error_exit "curl is required but not installed"
    
    # Initialize
    initialize_directories
    
    # Sync all databases
    echo ""
    echo "Syncing vulnerability databases..."
    sync_nvd
    sync_rustsec
    sync_ghsa
    sync_osv
    sync_cisa
    
    # Generate metrics
    echo ""
    generate_metrics
    
    # Check current project
    echo ""
    check_vulnerabilities
    
    echo ""
    echo "========================================="
    success "Vulnerability database sync complete!"
    echo "========================================="
    
    log "Synchronization completed successfully"
}

# Run main function
main "$@"