# Splunk Integration Configuration
# Universal Forwarder configuration for security log collection

[default]
host = security-monitoring

# Security logs from auth-service
[monitor:///var/log/auth-service/]
disabled = false
index = security
sourcetype = auth_service_logs
crcSalt = <SOURCE>

# Security logs from policy-service  
[monitor:///var/log/policy-service/]
disabled = false
index = security
sourcetype = policy_service_logs
crcSalt = <SOURCE>

# System authentication logs
[monitor:///var/log/auth.log]
disabled = false
index = security
sourcetype = linux_secure
crcSalt = <SOURCE>

# Audit logs
[monitor:///var/log/audit/audit.log]
disabled = false
index = security
sourcetype = linux_audit
crcSalt = <SOURCE>

# Docker container logs
[monitor:///var/lib/docker/containers/*/*-json.log]
disabled = false
index = security
sourcetype = docker_logs
crcSalt = <SOURCE>

# Application metrics
[monitor:///var/log/prometheus/]
disabled = false
index = metrics
sourcetype = prometheus_metrics
crcSalt = <SOURCE>

# Kubernetes logs
[monitor:///var/log/pods/]
disabled = false
index = security
sourcetype = kubernetes_logs
crcSalt = <SOURCE>

# Output configuration
[tcpout]
defaultGroup = security_indexers

[tcpout:security_indexers]
server = splunk-indexer.company.com:9997
compressed = true
useACK = true

# Heavy Forwarder configuration for advanced processing
[transforms]

# Extract security event fields
[transforms:extract_security_fields]
REGEX = "event_type":"([^"]+)".*"severity":"([^"]+)".*"source_ip":"([^"]+)"
FORMAT = event_type::$1 severity::$2 source_ip::$3

# Detect failed authentication
[transforms:extract_auth_failure]
REGEX = Failed password for (\w+) from ([\d\.]+)
FORMAT = failed_user::$1 source_ip::$2

# Extract audit events
[transforms:extract_audit_events]
REGEX = type=(\w+) msg=audit\([\d\.]+:(\d+)\): (.+)
FORMAT = audit_type::$1 audit_id::$2 audit_message::$3

[props]

# Security service logs
[auth_service_logs]
SHOULD_LINEMERGE = false
LINE_BREAKER = ([\r\n]+)\d{4}-\d{2}-\d{2}
TIME_PREFIX = ^
TIME_FORMAT = %Y-%m-%dT%H:%M:%S
KV_MODE = json
TRANSFORMS-security = extract_security_fields

[policy_service_logs]
SHOULD_LINEMERGE = false
LINE_BREAKER = ([\r\n]+)\d{4}-\d{2}-\d{2}
TIME_PREFIX = ^
TIME_FORMAT = %Y-%m-%dT%H:%M:%S
KV_MODE = json
TRANSFORMS-security = extract_security_fields

# System logs
[linux_secure]
SHOULD_LINEMERGE = false
TIME_PREFIX = ^
TIME_FORMAT = %b %d %H:%M:%S
TRANSFORMS-auth = extract_auth_failure

[linux_audit]
SHOULD_LINEMERGE = false
TIME_PREFIX = audit\(
TIME_FORMAT = %s.%3N
TRANSFORMS-audit = extract_audit_events

[docker_logs]
SHOULD_LINEMERGE = false
TIME_PREFIX = ^
TIME_FORMAT = %Y-%m-%dT%H:%M:%S.%f
KV_MODE = json

# Splunk Apps and Searches Configuration

# Saved Searches for Security Monitoring
[searches]

# Failed authentication monitoring
[savedsearch:security_failed_auth]
search = index=security sourcetype=linux_secure "Failed password" | stats count by source_ip, failed_user | where count > 5
dispatch.earliest_time = -15m
dispatch.latest_time = now
cron_schedule = */5 * * * *
alert.track = 1
alert.severity = 3
action.email = 1
action.email.to = security-team@company.com
action.email.subject = Multiple Failed Authentication Attempts

# Privilege escalation monitoring
[savedsearch:security_privilege_escalation]
search = index=security sourcetype=linux_audit audit_type=USER_CMD | rex field=audit_message "cmd=(?<command>\S+)" | where match(command, "sudo|su") | stats count by command, user | where count > 10
dispatch.earliest_time = -30m
dispatch.latest_time = now
cron_schedule = */10 * * * *
alert.track = 1
alert.severity = 4
action.email = 1
action.email.to = security-team@company.com
action.email.subject = Unusual Privilege Escalation Activity

# Suspicious network activity
[savedsearch:security_network_anomaly]
search = index=security event_type="network_anomaly" | stats count by source_ip, destination | where count > 5
dispatch.earliest_time = -10m
dispatch.latest_time = now
cron_schedule = */5 * * * *
alert.track = 1
alert.severity = 3
action.webhook = 1
action.webhook.param.url = https://alertmanager.company.com/api/v1/alerts

# File integrity violations
[savedsearch:security_file_integrity]
search = index=security event_type="file_integrity_violation"
dispatch.earliest_time = -5m
dispatch.latest_time = now
cron_schedule = */1 * * * *
alert.track = 1
alert.severity = 5
action.email = 1
action.email.to = security-team@company.com, soc@company.com
action.email.subject = CRITICAL: File Integrity Violation Detected

# Security scanner detection
[savedsearch:security_scanner_detection]
search = index=security ("nikto" OR "nmap" OR "sqlmap" OR "dirb" OR "gobuster")
dispatch.earliest_time = -5m
dispatch.latest_time = now
cron_schedule = */1 * * * *
alert.track = 1
alert.severity = 4
action.email = 1
action.email.to = security-team@company.com
action.email.subject = Security Scanner Activity Detected

# High error rate monitoring
[savedsearch:security_error_rate]
search = index=security severity=error | bucket _time span=5m | stats count by _time | where count > 50
dispatch.earliest_time = -15m
dispatch.latest_time = now
cron_schedule = */5 * * * *
alert.track = 1
alert.severity = 3
action.email = 1
action.email.to = operations-team@company.com
action.email.subject = High Error Rate Detected

# Dashboards Configuration
[dashboards]

# Security Operations Center Dashboard
[dashboard:security_overview]
description = Main security monitoring dashboard
panels = [
  {
    "title": "Authentication Events",
    "search": "index=security sourcetype=linux_secure | timechart count by action",
    "type": "line"
  },
  {
    "title": "Top Source IPs",
    "search": "index=security | top source_ip limit=10",
    "type": "table"
  },
  {
    "title": "Security Events by Type",
    "search": "index=security | stats count by event_type | sort -count",
    "type": "pie"
  },
  {
    "title": "Failed Logins Over Time",
    "search": "index=security \"Failed password\" | timechart count",
    "type": "area"
  }
]

# Threat Intelligence Dashboard
[dashboard:threat_intelligence]
description = Threat intelligence and indicators dashboard
panels = [
  {
    "title": "Malicious IP Activity",
    "search": "index=security | lookup threat_intel_ips ip as source_ip | where threat_level=\"high\"",
    "type": "table"
  },
  {
    "title": "Compromise Indicators",
    "search": "index=security | lookup ioc_lookup indicator as hash",
    "type": "single"
  }
]

# Compliance Dashboard
[dashboard:compliance_monitoring]
description = Security compliance monitoring
panels = [
  {
    "title": "Access Control Violations",
    "search": "index=security audit_type=USER_AUTH | stats count by result",
    "type": "pie"
  },
  {
    "title": "Privileged Account Usage",
    "search": "index=security user=root OR user=admin | timechart count by user",
    "type": "line"
  }
]

# Lookup Tables for Threat Intelligence
[lookups]

# Malicious IP addresses
[lookup:threat_intel_ips]
filename = threat_intel_ips.csv
case_sensitive_match = false

# Known malicious file hashes
[lookup:ioc_lookup]
filename = indicators_of_compromise.csv
case_sensitive_match = false

# Geographic IP information
[lookup:geoip]
filename = geoip.csv
case_sensitive_match = false

# Macros for Common Searches
[macros]

# Search for authentication events
[macro:auth_events]
definition = index=security (sourcetype=linux_secure OR sourcetype=auth_service_logs) 

# Search for security events with high severity
[macro:critical_security_events]
definition = index=security (severity=critical OR severity=high)

# Search for network-related security events
[macro:network_security_events]
definition = index=security (event_type=network_anomaly OR event_type=unauthorized_access)

# Splunk Alerting Integration
[alert_actions]

# Custom alert action for webhook notifications
[webhook_security_alert]
python.version = python3
is_custom = 1
label = Security Alert Webhook
description = Send security alerts to external webhook
param.webhook_url = https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK
param.message_format = Security Alert: $search_name$ - $result.message$

# SOAR integration alert action
[soar_integration]
python.version = python3
is_custom = 1
label = SOAR Integration
description = Send alerts to SOAR platform
param.soar_url = https://soar.company.com/api/alerts
param.api_key = YOUR_SOAR_API_KEY

# Email alert template
[email_security_template]
content_type = html
subject = Security Alert: $name$
message = <html>
<body>
<h2>Security Alert</h2>
<p><strong>Alert:</strong> $name$</p>
<p><strong>Time:</strong> $trigger_time$</p>
<p><strong>Description:</strong> $description$</p>
<p><strong>Results:</strong></p>
<table border="1">
$results$
</table>
</body>
</html>