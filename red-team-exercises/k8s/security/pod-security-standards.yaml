# Pod Security Standards - Restricted Profile
apiVersion: v1
kind: Namespace
metadata:
  name: auth-service
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted
---
# Note: SecurityContextConstraints are OpenShift-specific
# For standard Kubernetes, use Pod Security Standards with namespace labels
# If running on OpenShift, uncomment and use the SCC definition below:
#
# apiVersion: security.openshift.io/v1
# kind: SecurityContextConstraints
# metadata:
#   name: auth-service-restricted
# allowHostDirVolumePlugin: false
# allowHostIPC: false
# allowHostNetwork: false
# allowHostPID: false
# allowHostPorts: false
# allowPrivilegeEscalation: false
# allowPrivilegedContainer: false
# allowedCapabilities: []
# defaultAddCapabilities: []
# fsGroup:
#   type: MustRunAs
#   ranges:
#   - min: 1000
#     max: 65535
# runAsUser:
#   type: MustRunAsNonRoot
# readOnlyRootFilesystem: true
# requiredDropCapabilities:
# - ALL
# seccompProfiles:
# - runtime/default
# seLinuxContext:
#   type: MustRunAs
# supplementalGroups:
#   type: RunAsAny
# volumes:
# - configMap
# - downwardAPI
# - emptyDir
# - persistentVolumeClaim
# - projected
# - secret
# users:
# - system:serviceaccount:auth-service:auth-service
---
# Deployment with Security Context
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: auth-service
  labels:
    app: auth-service
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
        version: v1
      annotations:
        container.apparmor.security.beta.kubernetes.io/auth-service: runtime/default
        seccomp.security.alpha.kubernetes.io/pod: runtime/default
    spec:
      serviceAccountName: auth-service
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        seccompProfile:
          type: RuntimeDefault
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app
                operator: In
                values:
                - auth-service
            topologyKey: kubernetes.io/hostname
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values: ["amd64"]
              - key: node.kubernetes.io/instance-type
                operator: NotIn
                values: ["spot", "preemptible"]
      containers:
      - name: auth-service
        image: auth-service:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: RUST_LOG
          value: "info"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: auth-service-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: auth-service-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: auth-service-secrets
              key: jwt-secret
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
          runAsGroup: 10001
          capabilities:
            drop:
            - ALL
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
            ephemeral-storage: "100Mi"
          limits:
            memory: "512Mi"
            cpu: "500m"
            ephemeral-storage: "1Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-run
          mountPath: /var/run
        - name: cache
          mountPath: /app/cache
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 100Mi
      - name: var-run
        emptyDir:
          sizeLimit: 100Mi
      - name: cache
        emptyDir:
          sizeLimit: 200Mi
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: auth-service
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: auth-service
---
# Service Account with minimal permissions
apiVersion: v1
kind: ServiceAccount
metadata:
  name: auth-service
  namespace: auth-service
automountServiceAccountToken: false
---
# RBAC Configuration
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: auth-service
  namespace: auth-service
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
  resourceNames: ["auth-service-config"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: auth-service
  namespace: auth-service
subjects:
- kind: ServiceAccount
  name: auth-service
  namespace: auth-service
roleRef:
  kind: Role
  name: auth-service
  apiGroup: rbac.authorization.k8s.io