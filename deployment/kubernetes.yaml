# Kubernetes deployment for Enhanced OAuth Security System
# Production-ready with high availability, security, and monitoring

apiVersion: v1
kind: Namespace
metadata:
  name: auth-system
  labels:
    name: auth-system
    purpose: authentication

---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-service-config
  namespace: auth-system
data:
  production.toml: |
    [server]
    host = "0.0.0.0"
    port = 8080
    metrics_port = 9090
    
    [security]
    jwt_access_token_ttl_seconds = 300
    jwt_refresh_token_ttl_seconds = 3600
    auto_revoke_on_anomaly = true
    require_continuous_auth = true
    
    [jit_tokens]
    enabled = true
    min_lifetime = 60
    default_lifetime = 300
    require_binding = true
    enable_single_use = true
    
    [monitoring]
    enable_baseline_learning = true
    baseline_learning_hours = 24
    anomaly_sensitivity = 0.7
    enable_geo_anomaly = true
    enable_temporal_analysis = true
    auto_suspend_on_critical = true
    
    [identity_types]
    [identity_types.service_account]
    max_token_lifetime_seconds = 3600
    requires_attestation = false
    requires_continuous_auth = true
    
    [identity_types.ai_agent]
    max_token_lifetime_seconds = 300
    requires_attestation = true
    requires_continuous_auth = true
    
    [identity_types.api_key]
    max_token_lifetime_seconds = 1800
    requires_attestation = false
    requires_continuous_auth = false

---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: auth-service-secrets
  namespace: auth-system
type: Opaque
data:
  jwt-secret: # Base64 encoded JWT secret
  encryption-key: # Base64 encoded encryption key
  db-password: # Base64 encoded database password
  redis-password: # Base64 encoded Redis password
  slack-webhook-url: # Base64 encoded Slack webhook URL

---
# PostgreSQL StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: auth-system
spec:
  serviceName: postgres-service
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: auth_db
        - name: POSTGRES_USER
          value: auth_user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: auth-service-secrets
              key: db-password
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - auth_user
            - -d
            - auth_db
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - auth_user
            - -d
            - auth_db
          initialDelaySeconds: 5
          periodSeconds: 5
  volumeClaimTemplates:
  - metadata:
      name: postgres-storage
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: fast-ssd
      resources:
        requests:
          storage: 10Gi

---
# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: auth-system
spec:
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
  clusterIP: None

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: auth-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - --requirepass
        - $(REDIS_PASSWORD)
        - --maxmemory
        - "256mb"
        - --maxmemory-policy
        - allkeys-lru
        ports:
        - containerPort: 6379
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: auth-service-secrets
              key: redis-password
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 5
          periodSeconds: 5

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: auth-system
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# Auth Service Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: auth-system
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: auth-service-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: auth-service
        image: auth-service:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: DATABASE_URL
          value: "postgresql://auth_user:$(DB_PASSWORD)@postgres-service:5432/auth_db"
        - name: REDIS_URL
          value: "redis://:$(REDIS_PASSWORD)@redis-service:6379/0"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: auth-service-secrets
              key: jwt-secret
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: auth-service-secrets
              key: encryption-key
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: auth-service-secrets
              key: db-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: auth-service-secrets
              key: redis-password
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: auth-service-secrets
              key: slack-webhook-url
        - name: SECURITY_MONITORING_ENABLED
          value: "true"
        - name: JIT_TOKENS_ENABLED
          value: "true"
        - name: RUST_LOG
          value: "auth_service=info,sqlx=warn"
        - name: CONFIG_PATH
          value: "/app/config/production.toml"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: ssl-certs
          mountPath: /app/ssl
          readOnly: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      volumes:
      - name: config-volume
        configMap:
          name: auth-service-config
      - name: ssl-certs
        secret:
          secretName: auth-service-tls

---
# Auth Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: auth-service-sa
  namespace: auth-system

---
# Auth Service ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: auth-service-role
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
# Auth Service ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: auth-service-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: auth-service-role
subjects:
- kind: ServiceAccount
  name: auth-service-sa
  namespace: auth-system

---
# Auth Service LoadBalancer Service
apiVersion: v1
kind: Service
metadata:
  name: auth-service-lb
  namespace: auth-system
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:region:account-id:certificate/cert-id"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "http"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
spec:
  type: LoadBalancer
  selector:
    app: auth-service
  ports:
  - name: https
    port: 443
    targetPort: 8080
  - name: http
    port: 80
    targetPort: 8080

---
# Auth Service ClusterIP Service for internal access
apiVersion: v1
kind: Service
metadata:
  name: auth-service
  namespace: auth-system
  labels:
    app: auth-service
spec:
  selector:
    app: auth-service
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: metrics
    port: 9090
    targetPort: 9090

---
# Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: auth-service-hpa
  namespace: auth-system
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: auth-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: jit_token_request_rate
      target:
        type: AverageValue
        averageValue: "100"

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: auth-service-pdb
  namespace: auth-system
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: auth-service

---
# Network Policy for security isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: auth-service-netpol
  namespace: auth-system
spec:
  podSelector:
    matchLabels:
      app: auth-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []  # Allow external HTTPS for webhooks, geo lookup
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# ServiceMonitor for Prometheus scraping
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: auth-service-metrics
  namespace: auth-system
  labels:
    app: auth-service
    monitoring: prometheus
spec:
  selector:
    matchLabels:
      app: auth-service
  endpoints:
  - port: metrics
    interval: 15s
    path: /metrics
    honorLabels: true

---
# PrometheusRule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: auth-service-alerts
  namespace: auth-system
  labels:
    app: auth-service
    monitoring: prometheus
spec:
  groups:
  - name: auth-service.rules
    interval: 15s
    rules:
    - alert: AuthServiceDown
      expr: up{job="auth-service"} == 0
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "Auth Service is down"
        description: "Auth Service has been down for more than 1 minute"
        
    - alert: HighJitTokenRejectionRate
      expr: rate(jit_tokens_rejected_total[5m]) > 10
      for: 2m
      labels:
        severity: warning
      annotations:
        summary: "High JIT token rejection rate"
        description: "JIT token rejection rate is {{ $value }} tokens/minute"
        
    - alert: BehavioralAnomalySpike
      expr: rate(behavioral_anomalies_detected_total[5m]) > 5
      for: 1m
      labels:
        severity: critical
      annotations:
        summary: "Behavioral anomaly spike detected"
        description: "Anomaly detection rate is {{ $value }} anomalies/minute"
        
    - alert: ServiceAccountCompromise
      expr: |
        (
          rate(service_identities_suspended_total{reason="compromise"}[1m]) > 0
        ) or (
          rate(auto_suspensions_total[1m]) > 3
        )
      for: 30s
      labels:
        severity: critical
      annotations:
        summary: "Potential service account compromise"
        description: "Multiple service accounts showing compromise indicators"
        
    - alert: HighMemoryUsage
      expr: container_memory_usage_bytes{pod=~"auth-service-.*"} / container_spec_memory_limit_bytes > 0.8
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High memory usage"
        description: "Auth Service memory usage is above 80%"

---
# Ingress for external access (if using ingress controller)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: auth-service-ingress
  namespace: auth-system
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - auth.yourdomain.com
    secretName: auth-service-tls
  rules:
  - host: auth.yourdomain.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: auth-service
            port:
              number: 8080