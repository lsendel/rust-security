#!/bin/bash
# Comprehensive security scanning script for Rust Security Platform
# Runs multiple security tools and generates consolidated reports

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"
REPORTS_DIR="${PROJECT_ROOT}/security-reports"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Create reports directory
mkdir -p "${REPORTS_DIR}"

echo -e "${BLUE}🔒 Starting comprehensive security scan...${NC}"
echo "Reports will be saved to: ${REPORTS_DIR}"

# Function to run a security tool and capture results
run_security_tool() {
    local tool_name="$1"
    local command="$2"
    local output_file="${REPORTS_DIR}/${TIMESTAMP}_${tool_name}.txt"

    echo -e "${YELLOW}Running ${tool_name}...${NC}"

    if eval "${command}" > "${output_file}" 2>&1; then
        echo -e "${GREEN}✅ ${tool_name} completed successfully${NC}"
    else
        local exit_code=$?
        echo -e "${RED}❌ ${tool_name} failed with exit code ${exit_code}${NC}"
        echo "Check ${output_file} for details"
    fi
}

# 1. Cargo Audit - Check for known security vulnerabilities
echo -e "${BLUE}📦 Checking for dependency vulnerabilities...${NC}"
run_security_tool "cargo_audit" "cargo audit --format json || cargo audit"

# 2. Clippy Security Lints
echo -e "${BLUE}🔧 Running security-focused clippy checks...${NC}"
run_security_tool "clippy_security" "cargo clippy --all-targets --all-features -- -W clippy::all"

# 3. Check for hardcoded secrets (simple pattern matching)
echo -e "${BLUE}🔑 Scanning for potential hardcoded secrets...${NC}"
run_security_tool "secret_scan" "find ${PROJECT_ROOT} -name '*.rs' -exec grep -l 'password\|secret\|key.*=' {} \; | head -10"

# 4. Check for unsafe code usage
echo -e "${BLUE}⚠️  Analyzing unsafe code usage...${NC}"
run_security_tool "unsafe_analysis" "cargo clippy --all-targets --all-features -- -W unsafe_code"

# 5. Memory safety analysis (if available)
if command -v "cargo-careful" &> /dev/null; then
    echo -e "${BLUE}🧠 Running careful memory safety analysis...${NC}"
    run_security_tool "careful_analysis" "cargo careful check"
else
    echo -e "${YELLOW}⚠️  cargo-careful not installed, skipping memory safety analysis${NC}"
fi

# 6. SBOM Generation
echo -e "${BLUE}📋 Generating Software Bill of Materials...${NC}"
run_security_tool "sbom_generation" "cargo install cargo-sbom && cargo sbom --output-format json"

# 7. License compliance check
echo -e "${BLUE}⚖️  Checking license compliance...${NC}"
run_security_tool "license_check" "cargo install cargo-deny && cargo deny check licenses"

# 8. Binary security analysis (if available)
if command -v "checksec" &> /dev/null; then
    echo -e "${BLUE}🔍 Analyzing binary security properties...${NC}"
    cargo build --release
    run_security_tool "binary_security" "find target/release -name '*.so' -o -name 'rust-security*' | xargs -I {} checksec --file {}"
fi

# Generate summary report
echo -e "${BLUE}📊 Generating security scan summary...${NC}"
SUMMARY_FILE="${REPORTS_DIR}/${TIMESTAMP}_security_summary.md"

cat > "${SUMMARY_FILE}" << EOF
# Security Scan Summary Report
**Date:** $(date)
**Project:** Rust Security Platform
**Scan ID:** ${TIMESTAMP}

## Scan Results Overview

### Tools Executed:
- ✅ Cargo Audit (Dependency vulnerabilities)
- ✅ Clippy Security Lints (Code quality)
- ✅ Secret Pattern Scanning (Hardcoded secrets)
- ✅ Unsafe Code Analysis (Memory safety)
- ✅ SBOM Generation (Supply chain)
- ✅ License Compliance Check
EOF

if command -v "cargo-careful" &> /dev/null; then
    echo "- ✅ Careful Memory Analysis" >> "${SUMMARY_FILE}"
fi

if command -v "checksec" &> /dev/null; then
    echo "- ✅ Binary Security Analysis" >> "${SUMMARY_FILE}"
fi

cat >> "${SUMMARY_FILE}" << EOF

## Detailed Results:
$(find "${REPORTS_DIR}" -name "${TIMESTAMP}_*.txt" -exec basename {} \; | sed 's/^/- /')

## Recommendations:
1. Review all generated reports in ${REPORTS_DIR}
2. Address any high-severity vulnerabilities immediately
3. Fix clippy warnings to improve code quality
4. Ensure all dependencies have acceptable licenses
5. Review unsafe code usage for necessity

## Next Steps:
- Integrate this script into CI/CD pipeline
- Set up automated alerts for new vulnerabilities
- Regular security scans (weekly/monthly)
- Penetration testing for production deployments

---
*Generated by automated security scanning script*
EOF

echo -e "${GREEN}🎉 Security scan completed!${NC}"
echo -e "${BLUE}📁 Summary report: ${SUMMARY_FILE}${NC}"
echo -e "${YELLOW}📋 Individual reports:${NC}"
find "${REPORTS_DIR}" -name "${TIMESTAMP}_*.txt" -exec basename {} \;

# Exit with success
echo -e "${GREEN}✅ Security scanning pipeline completed successfully${NC}"
