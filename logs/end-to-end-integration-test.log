Starting end-to-end integration testing...
Timestamp: Sun Aug 17 06:04:44 EDT 2025
Starting comprehensive end-to-end integration testing
=== Testing Code Compilation and Build ===
Testing: Auth service compiles successfully
    Checking cfg-if v1.0.1
    Checking once_cell v1.21.3
    Checking itoa v1.0.15
    Checking pin-project-lite v0.2.16
    Checking libc v0.2.175
    Checking bytes v1.10.1
    Checking smallvec v1.15.1
    Checking futures-core v0.3.31
    Checking typenum v1.18.0
    Checking subtle v2.6.1
    Checking zeroize v1.8.1
    Checking stable_deref_trait v1.2.0
    Checking tracing-core v0.1.34
    Checking futures-sink v0.3.31
    Checking core-foundation-sys v0.8.7
    Checking serde v1.0.219
    Checking zerofrom v0.1.6
    Checking fnv v1.0.7
    Checking log v0.4.27
    Checking slab v0.4.11
    Checking bitflags v2.9.2
    Checking memchr v2.7.5
    Checking yoke v0.8.0
    Checking pin-utils v0.1.0
    Checking const-oid v0.9.6
    Checking futures-task v0.3.31
    Checking generic-array v0.14.7
    Checking zerovec v0.11.4
    Checking tracing v0.1.41
    Checking http v1.3.1
    Checking getrandom v0.2.16
    Checking socket2 v0.6.0
    Checking signal-hook-registry v1.4.6
    Checking mio v1.0.4
    Checking futures-util v0.3.31
    Checking percent-encoding v2.3.1
    Checking core-foundation v0.9.4
    Checking libm v0.2.15
    Checking writeable v0.6.1
    Checking hashbrown v0.15.5
    Checking litemap v0.8.0
    Checking tinystr v0.8.1
    Checking equivalent v1.0.2
    Checking icu_locale_core v2.0.0
    Checking potential_utf v0.1.2
    Checking zerotrie v0.2.2
    Checking rustls-pki-types v1.12.0
    Checking rand_core v0.6.4
    Checking base64 v0.22.1
    Checking tower-service v0.3.3
    Checking crypto-common v0.1.6
    Checking untrusted v0.9.0
    Checking ryu v1.0.20
    Checking indexmap v2.10.0
    Checking icu_collections v2.0.0
    Checking block-buffer v0.10.4
    Checking tokio v1.47.1
    Checking futures-channel v0.3.31
    Checking icu_provider v2.0.0
    Checking base64ct v1.8.0
    Checking ring v0.17.14
    Checking atomic-waker v1.1.2
    Checking try-lock v0.2.5
    Checking want v0.3.1
    Checking digest v0.10.7
    Checking icu_normalizer_data v2.0.0
    Checking system-configuration-sys v0.6.0
    Checking getrandom v0.3.3
    Checking httparse v1.10.1
    Checking icu_properties_data v2.0.1
    Checking aws-lc-sys v0.30.0
    Checking http-body v1.0.1
    Checking httpdate v1.0.3
    Checking fastrand v2.3.0
    Checking icu_properties v2.0.1
    Checking system-configuration v0.6.1
    Checking icu_normalizer v2.0.0
    Checking serde_json v1.0.142
    Checking form_urlencoded v1.2.1
    Checking errno v0.3.13
    Checking cpufeatures v0.2.17
    Checking spin v0.9.8
    Checking ipnet v2.11.0
    Checking powerfmt v0.2.0
    Checking http-body-util v0.1.3
    Checking lazy_static v1.5.0
    Checking rustix v1.0.8
    Checking pem-rfc7468 v0.7.0
    Checking zerocopy v0.8.26
    Checking aws-lc-rs v1.13.3
    Checking security-framework-sys v2.14.0
    Checking sync_wrapper v1.0.2
    Checking deranged v0.4.0
    Checking num-conv v0.1.0
    Checking tower-layer v0.3.3
    Checking time-core v0.1.4
    Checking idna_adapter v1.2.1
    Checking utf8_iter v1.0.4
    Checking der v0.7.10
    Checking inout v0.1.4
    Checking idna v1.0.3
    Checking aho-corasick v1.1.3
    Checking security-framework v2.11.1
    Checking regex-syntax v0.8.5
    Checking time v0.3.41
    Checking scopeguard v1.2.0
    Checking url v2.5.4
    Checking lock_api v0.4.13
    Checking cipher v0.4.4
    Checking ppv-lite86 v0.2.21
    Checking num-traits v0.2.19
    Checking thiserror v2.0.14
    Checking thiserror v1.0.69
    Checking parking_lot_core v0.9.11
    Checking universal-hash v0.5.1
    Checking rand_chacha v0.3.1
    Checking opaque-debug v0.3.1
    Checking mime v0.3.17
    Checking regex-syntax v0.6.29
    Checking polyval v0.6.2
    Checking rand v0.8.5
    Checking tempfile v3.20.0
    Checking num-integer v0.1.46
    Checking protobuf-support v3.7.2
    Checking serde_urlencoded v0.7.1
    Checking uuid v1.18.0
    Checking num-bigint v0.4.6
    Checking num-iter v0.1.45
    Checking tokio-util v0.7.16
    Checking pem v3.0.5
    Checking rustls-webpki v0.103.4
    Checking webpki-roots v1.0.2
    Checking overload v0.1.1
    Checking spki v0.7.3
    Checking arc-swap v1.7.1
    Checking native-tls v0.2.14
    Checking iri-string v0.7.8
    Checking byteorder v1.5.0
    Checking nu-ansi-term v0.46.0
    Checking h2 v0.4.12
    Checking tower v0.5.2
    Checking pkcs8 v0.10.2
    Checking protobuf v3.7.2
    Checking tokio-native-tls v0.3.1
    Checking rustls v0.23.31
    Checking num-bigint-dig v0.8.4
    Checking combine v4.6.7
    Checking pkcs1 v0.7.5
    Checking axum-core v0.4.5
    Checking simple_asn1 v0.6.3
    Checking fs-err v3.1.1
    Checking regex-automata v0.4.9
    Checking yasna v0.5.2
    Checking ghash v0.5.1
    Checking crossbeam-utils v0.8.21
    Checking parking_lot v0.12.4
    Checking aes v0.8.4
    Checking ctr v0.9.2
    Checking sharded-slab v0.1.7
    Checking backon v1.5.2
    Checking password-hash v0.5.0
    Checking blake2 v0.10.6
    Checking signature v2.2.0
    Checking aead v0.5.2
    Checking regex-automata v0.1.10
    Checking rustls-pemfile v2.2.0
    Checking tracing-serde v0.2.0
    Checking serde_path_to_error v0.1.17
    Checking tracing-log v0.2.0
    Checking iana-time-zone v0.1.63
    Checking tower-http v0.6.6
    Checking encoding_rs v0.8.35
    Checking thread_local v1.1.9
    Checking sha1_smol v1.0.1
    Checking matchit v0.7.3
    Checking hashbrown v0.14.5
    Checking regex v1.11.1
    Checking chrono v0.4.41
    Checking validator v0.20.0
    Checking dashmap v6.1.0
    Checking argon2 v0.5.3
    Checking aes-gcm v0.10.3
    Checking hyper v1.6.0
    Checking rsa v0.9.8
    Checking rcgen v0.13.2
    Checking utoipa v4.2.3
    Checking jsonwebtoken v9.3.1
    Checking matchers v0.1.0
    Checking anyhow v1.0.99
    Checking redis v0.32.5
    Checking sha2 v0.10.9
    Checking sha1 v0.10.6
    Checking tracing-subscriber v0.3.19
    Checking hmac v0.12.1
    Checking envy v0.4.2
    Checking num_cpus v1.17.0
    Checking tokio-rustls v0.26.2
    Checking secrecy v0.10.3
    Checking dotenvy v0.15.7
    Checking base64 v0.21.7
    Checking data-encoding v2.9.0
    Checking urlencoding v2.1.3
    Checking hyper-util v0.1.16
    Checking hyper-rustls v0.27.7
    Checking hyper-tls v0.6.0
    Checking axum v0.7.9
    Checking axum-server v0.7.2
    Checking reqwest v0.12.23
    Checking prometheus v0.14.0
    Checking auth-service v0.1.0 (/Users/lsendel/IdeaProjects/rust-security/auth-service)
warning: unused import: `crate::keys`
 --> auth-service/src/key_rotation.rs:1:5
  |
1 | use crate::keys;
  |     ^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `base64::engine::general_purpose::URL_SAFE_NO_PAD`
 --> auth-service/src/webauthn.rs:2:5
  |
2 | use base64::engine::general_purpose::URL_SAFE_NO_PAD;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `SessionError`
   --> auth-service/src/lib.rs:319:56
    |
319 | use crate::session_manager::{SESSION_MANAGER, Session, SessionError};
    |                                                        ^^^^^^^^^^^^

warning: this function depends on never type fallback being `()`
   --> auth-service/src/session_manager.rs:399:5
    |
399 |     async fn store_session_to_redis(&self, client: &redis::Client, session: &Session) -> Result<(), redis::RedisError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
    = help: specify the types explicitly
note: in edition 2024, the requirement `!: FromRedisValue` will fail
   --> auth-service/src/session_manager.rs:414:14
    |
414 |             .query_async(&mut conn)
    |              ^^^^^^^^^^^
    = note: `#[warn(dependency_on_unit_never_type_fallback)]` on by default
help: use `()` annotations to avoid fallback changes
    |
414 ~             .query_async::<()>(&mut conn)
415 |             .await?;
...
420 |             .arg(&session.id)
421 ~             .query_async::<()>(&mut conn)
422 |             .await?;
...
427 |             .arg(ttl)
428 ~             .query_async::<()>(&mut conn)
    |

warning: this function depends on never type fallback being `()`
   --> auth-service/src/session_manager.rs:434:5
    |
434 |     async fn delete_session_from_redis(&self, client: &redis::Client, session_id: &str) -> Result<(), redis::RedisError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
    = help: specify the types explicitly
note: in edition 2024, the requirement `!: FromRedisValue` will fail
   --> auth-service/src/session_manager.rs:443:18
    |
443 |                 .query_async(&mut conn)
    |                  ^^^^^^^^^^^
help: use `()` annotations to avoid fallback changes
    |
443 ~                 .query_async::<()>(&mut conn)
444 |                 .await?;
...
449 |             .arg(&key)
450 ~             .query_async::<()>(&mut conn)
    |

warning: unused variable: `mfa_verified`
  --> auth-service/src/store.rs:90:78
   |
90 |                 let (active, scope, client_id, exp, iat, sub, token_binding, mfa_verified): (
   |                                                                              ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mfa_verified`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `time_window`
   --> auth-service/src/mfa.rs:116:54
    |
116 | async fn track_totp_nonce(user_id: &str, code: &str, time_window: u64) -> bool {
    |                                                      ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_window`

warning: unused variable: `state`
  --> auth-service/src/webauthn.rs:75:34
   |
75 | pub async fn finish_assert(State(state): State<AppState>, Json(body): Json<FinishAssertRequest>) -> Json<FinishAssertResponse> {
   |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `body`
  --> auth-service/src/webauthn.rs:75:64
   |
75 | pub async fn finish_assert(State(state): State<AppState>, Json(body): Json<FinishAssertRequest>) -> Json<FinishAssertResponse> {
   |                                                                ^^^^ help: if this is intentional, prefix it with an underscore: `_body`

warning: unused variable: `request_id`
    --> auth-service/src/lib.rs:1120:9
     |
1120 |     let request_id = headers
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request_id`

warning: `auth-service` (lib) generated 10 warnings (run `cargo fix --lib -p auth-service` to apply 5 suggestions)
    Finished `release` profile [optimized] target(s) in 10.17s
warning: the following packages contain code that will be rejected by a future version of Rust: auth-service v0.1.0 (/Users/lsendel/IdeaProjects/rust-security/auth-service)
note: to see what the problems were, use the option `--future-incompat-report`, or run `cargo report future-incompatibilities --id 1`
✅ PASS: Auth service compiles successfully
Testing: No compilation warnings or errors
❌ FAIL: No compilation warnings or errors (expected success but failed)
Testing: Tests compile successfully
warning: unused import: `crate::keys`
 --> auth-service/src/key_rotation.rs:1:5
  |
1 | use crate::keys;
  |     ^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `base64::engine::general_purpose::URL_SAFE_NO_PAD`
 --> auth-service/src/webauthn.rs:2:5
  |
2 | use base64::engine::general_purpose::URL_SAFE_NO_PAD;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `SessionError`
   --> auth-service/src/lib.rs:319:56
    |
319 | use crate::session_manager::{SESSION_MANAGER, Session, SessionError};
    |                                                        ^^^^^^^^^^^^

warning: this function depends on never type fallback being `()`
   --> auth-service/src/session_manager.rs:399:5
    |
399 |     async fn store_session_to_redis(&self, client: &redis::Client, session: &Session) -> Result<(), redis::RedisError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
    = help: specify the types explicitly
note: in edition 2024, the requirement `!: FromRedisValue` will fail
   --> auth-service/src/session_manager.rs:414:14
    |
414 |             .query_async(&mut conn)
    |              ^^^^^^^^^^^
    = note: `#[warn(dependency_on_unit_never_type_fallback)]` on by default
help: use `()` annotations to avoid fallback changes
    |
414 ~             .query_async::<()>(&mut conn)
415 |             .await?;
...
420 |             .arg(&session.id)
421 ~             .query_async::<()>(&mut conn)
422 |             .await?;
...
427 |             .arg(ttl)
428 ~             .query_async::<()>(&mut conn)
    |

warning: this function depends on never type fallback being `()`
   --> auth-service/src/session_manager.rs:434:5
    |
434 |     async fn delete_session_from_redis(&self, client: &redis::Client, session_id: &str) -> Result<(), redis::RedisError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in Rust 2024 and in a future release in all editions!
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/never-type-fallback.html>
    = help: specify the types explicitly
note: in edition 2024, the requirement `!: FromRedisValue` will fail
   --> auth-service/src/session_manager.rs:443:18
    |
443 |                 .query_async(&mut conn)
    |                  ^^^^^^^^^^^
help: use `()` annotations to avoid fallback changes
    |
443 ~                 .query_async::<()>(&mut conn)
444 |                 .await?;
...
449 |             .arg(&key)
450 ~             .query_async::<()>(&mut conn)
    |

warning: unused variable: `mfa_verified`
  --> auth-service/src/store.rs:90:78
   |
90 |                 let (active, scope, client_id, exp, iat, sub, token_binding, mfa_verified): (
   |                                                                              ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mfa_verified`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `time_window`
   --> auth-service/src/mfa.rs:116:54
    |
116 | async fn track_totp_nonce(user_id: &str, code: &str, time_window: u64) -> bool {
    |                                                      ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_time_window`

warning: unused variable: `state`
  --> auth-service/src/webauthn.rs:75:34
   |
75 | pub async fn finish_assert(State(state): State<AppState>, Json(body): Json<FinishAssertRequest>) -> Json<FinishAssertResponse> {
   |                                  ^^^^^ help: if this is intentional, prefix it with an underscore: `_state`

warning: unused variable: `body`
  --> auth-service/src/webauthn.rs:75:64
   |
75 | pub async fn finish_assert(State(state): State<AppState>, Json(body): Json<FinishAssertRequest>) -> Json<FinishAssertResponse> {
   |                                                                ^^^^ help: if this is intentional, prefix it with an underscore: `_body`

warning: unused variable: `request_id`
    --> auth-service/src/lib.rs:1120:9
     |
1120 |     let request_id = headers
     |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request_id`

warning: `auth-service` (lib) generated 10 warnings (run `cargo fix --lib -p auth-service` to apply 5 suggestions)
warning: unused import: `response::Response`
   --> auth-service/src/security_headers.rs:207:9
    |
207 |         response::Response,
    |         ^^^^^^^^^^^^^^^^^^

warning: `auth-service` (lib test) generated 11 warnings (10 duplicates) (run `cargo fix --lib -p auth-service --tests` to apply 1 suggestion)
    Finished `test` profile [unoptimized + debuginfo] target(s) in 0.62s
warning: the following packages contain code that will be rejected by a future version of Rust: auth-service v0.1.0 (/Users/lsendel/IdeaProjects/rust-security/auth-service)
note: to see what the problems were, use the option `--future-incompat-report`, or run `cargo report future-incompatibilities --id 2`
  Executable unittests src/lib.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/auth_service-e7b580436422da44)
  Executable unittests src/main.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/auth_service-d7f310a2d1f715ce)
  Executable tests/authorization_it.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/authorization_it-78c9103ee23e02a9)
  Executable tests/comprehensive_integration_test.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/comprehensive_integration_test-4b41f5a2dc98e8f0)
  Executable tests/health_introspect_it.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/health_introspect_it-df20e7a4a1157b7f)
  Executable tests/openid_metadata_it.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/openid_metadata_it-c6d3d9cec71e310b)
  Executable tests/pkce_oauth_test.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/pkce_oauth_test-af062d13dd9ed40b)
  Executable tests/request_id_it.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/request_id_it-2e954c5c7de3b728)
  Executable tests/scim_it.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/scim_it-c503ef026ac7cc34)
  Executable tests/scope_validation_test.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/scope_validation_test-8e0530e71e0811c1)
  Executable tests/security_features_test.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/security_features_test-627d90aff5611a2c)
  Executable tests/security_logging_test.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/security_logging_test-19dd182c5dc647d8)
  Executable tests/security_test.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/security_test-de287f88a31f81bc)
  Executable tests/step_up_it.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/step_up_it-d851f6f8ba19cb48)
  Executable tests/token_basic_auth_it.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/token_basic_auth_it-5d8a51cfe9d24489)
  Executable tests/token_flow_it.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/token_flow_it-f50fe90cda8953a0)
  Executable tests/token_refresh_it.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/token_refresh_it-c69eecaef1393c8b)
  Executable tests/token_store_unit.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/token_store_unit-7f220725184f0e06)
  Executable tests/totp_it.rs (/Users/lsendel/IdeaProjects/rust-security/target/debug/deps/totp_it-cde01eeeeff73840)
✅ PASS: Tests compile successfully
Testing: Axum integration example compiles
    Checking futures-task v0.3.31
   Compiling syn v2.0.106
    Checking num-traits v0.2.19
    Checking crypto-common v0.1.6
    Checking sync_wrapper v1.0.2
    Checking regex-syntax v0.8.5
    Checking lazy_static v1.5.0
    Checking ring v0.17.14
    Checking bitflags v2.9.2
    Checking futures-util v0.3.31
    Checking cipher v0.4.4
    Checking sharded-slab v0.1.7
    Checking num-integer v0.1.46
    Checking blowfish v0.9.1
    Checking num-bigint v0.4.6
    Checking bcrypt v0.15.1
    Checking regex-automata v0.4.9
    Checking regex v1.11.1
   Compiling serde_derive v1.0.219
   Compiling tracing-attributes v0.1.30
   Compiling tokio-macros v2.5.0
   Compiling thiserror-impl v2.0.14
   Compiling async-trait v0.1.89
   Compiling pin-project-internal v1.1.10
   Compiling axum-macros v0.4.2
   Compiling thiserror-impl v1.0.69
    Checking tokio v1.47.1
    Checking pin-project v1.1.10
    Checking tracing v0.1.41
    Checking thiserror v1.0.69
    Checking thiserror v2.0.14
    Checking serde v1.0.219
    Checking axum-core v0.4.5
    Checking tracing-subscriber v0.3.19
    Checking tower v0.4.13
    Checking tower-http v0.6.6
    Checking simple_asn1 v0.6.3
    Checking hyper v1.6.0
    Checking tower v0.5.2
    Checking hyper-util v0.1.16
    Checking serde_json v1.0.142
    Checking serde_urlencoded v0.7.1
    Checking serde_path_to_error v0.1.17
    Checking uuid v1.18.0
    Checking chrono v0.4.41
    Checking axum v0.7.9
    Checking jsonwebtoken v9.3.1
    Checking axum-integration-example v0.1.0 (/Users/lsendel/IdeaProjects/rust-security/axum-integration-example)
warning: unused import: `delete`
 --> axum-integration-example/src/lib.rs:5:15
  |
5 |     routing::{delete, get, post, put},
  |               ^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `UserRole`
 --> axum-integration-example/src/repository.rs:1:57
  |
1 | use crate::{CreateUserRequest, UpdateUserRequest, User, UserRole};
  |                                                         ^^^^^^^^

warning: unused variable: `database_url`
   --> axum-integration-example/src/database.rs:165:15
    |
165 |     if let Ok(database_url) = std::env::var("DATABASE_URL") {
    |               ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_database_url`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: `axum-integration-example` (lib) generated 3 warnings (run `cargo fix --lib -p axum-integration-example` to apply 2 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 8.11s
✅ PASS: Axum integration example compiles
=== Testing Unit and Integration Tests ===
Testing: Security unit tests pass
./scripts/end_to_end_integration_test.sh: line 34: timeout: command not found
❌ FAIL: Security unit tests pass (expected success but failed)
Testing: Circuit breaker tests pass
./scripts/end_to_end_integration_test.sh: line 34: timeout: command not found
❌ FAIL: Circuit breaker tests pass (expected success but failed)
Testing: Key management tests pass
./scripts/end_to_end_integration_test.sh: line 34: timeout: command not found
❌ FAIL: Key management tests pass (expected success but failed)
Testing: Store tests pass
./scripts/end_to_end_integration_test.sh: line 34: timeout: command not found
❌ FAIL: Store tests pass (expected success but failed)
Testing: SCIM tests pass
./scripts/end_to_end_integration_test.sh: line 34: timeout: command not found
❌ FAIL: SCIM tests pass (expected success but failed)
Testing: MFA tests pass
./scripts/end_to_end_integration_test.sh: line 34: timeout: command not found
❌ FAIL: MFA tests pass (expected success but failed)
=== Testing Integration Test Suites ===
Testing: Health and introspection integration tests
./scripts/end_to_end_integration_test.sh: line 34: timeout: command not found
❌ FAIL: Health and introspection integration tests (expected success but failed)
Testing: OpenID metadata integration tests
./scripts/end_to_end_integration_test.sh: line 34: timeout: command not found
❌ FAIL: OpenID metadata integration tests (expected success but failed)
Testing: Request ID integration tests
./scripts/end_to_end_integration_test.sh: line 34: timeout: command not found
❌ FAIL: Request ID integration tests (expected success but failed)
Testing: Scope validation tests
./scripts/end_to_end_integration_test.sh: line 34: timeout: command not found
❌ FAIL: Scope validation tests (expected success but failed)
Testing: Token basic auth integration tests
./scripts/end_to_end_integration_test.sh: line 34: timeout: command not found
❌ FAIL: Token basic auth integration tests (expected success but failed)
Testing: Token refresh integration tests
./scripts/end_to_end_integration_test.sh: line 34: timeout: command not found
❌ FAIL: Token refresh integration tests (expected success but failed)
=== Testing Security Configuration Validation ===
Testing: Security monitoring configuration exists
✅ PASS: Security monitoring configuration exists
Testing: Prometheus security alerts are valid YAML
✅ PASS: Prometheus security alerts are valid YAML
Testing: Fluentd configuration is valid
✅ PASS: Fluentd configuration is valid
Testing: Elasticsearch ILM policies are configured
✅ PASS: Elasticsearch ILM policies are configured
Testing: Grafana security dashboard is configured
✅ PASS: Grafana security dashboard is configured
=== Testing Compliance and Reporting ===
Testing: Compliance configuration is valid
✅ PASS: Compliance configuration is valid
Testing: Compliance report generator exists and is executable
❌ FAIL: Compliance report generator exists and is executable (expected success but failed)
Testing: Previous compliance report exists and is valid
✅ PASS: Previous compliance report exists and is valid
Testing: Security controls validation script exists
✅ PASS: Security controls validation script exists
=== Testing Threat Intelligence Integration ===
Testing: Threat intelligence feeds configuration is valid
✅ PASS: Threat intelligence feeds configuration is valid
Testing: Threat intelligence updater script exists
✅ PASS: Threat intelligence updater script exists
Testing: Threat detection validation completed successfully
✅ PASS: Threat detection validation completed successfully
Testing: Sigma rules are generated and valid
✅ PASS: Sigma rules are generated and valid
Testing: Prometheus threat intel rules are valid
✅ PASS: Prometheus threat intel rules are valid
=== Testing Security Logging Integration ===
Testing: Security logging module compiles
✅ PASS: Security logging module compiles
Testing: Security logger is properly integrated
✅ PASS: Security logger is properly integrated
Testing: All endpoints have security logging
❌ FAIL: All endpoints have security logging (expected success but failed)
Testing: Tracing configuration exists
✅ PASS: Tracing configuration exists
=== Testing Performance and Load Testing Scripts ===
Testing: Performance analysis script exists
✅ PASS: Performance analysis script exists
Testing: Load test scripts exist
✅ PASS: Load test scripts exist
Testing: Benchmark tests are configured
✅ PASS: Benchmark tests are configured
Testing: Regression test scripts exist
✅ PASS: Regression test scripts exist
=== Testing Documentation and Deployment Readiness ===
Testing: GitOps configuration exists
✅ PASS: GitOps configuration exists
Testing: Helm charts are configured
✅ PASS: Helm charts are configured
Testing: Monitoring configuration is complete
✅ PASS: Monitoring configuration is complete
Testing: Security policies are configured
✅ PASS: Security policies are configured
Testing: Implementation documentation exists
✅ PASS: Implementation documentation exists
=== Testing CI/CD and Automation ===
Testing: GitHub Actions CI configuration exists
✅ PASS: GitHub Actions CI configuration exists
Testing: Security audit workflow exists
✅ PASS: Security audit workflow exists
Testing: CI configuration is valid YAML
✅ PASS: CI configuration is valid YAML
Testing: Security audit configuration is valid YAML
✅ PASS: Security audit configuration is valid YAML
Testing: Automation scripts exist
find: -executable: unknown primary or operator
❌ FAIL: Automation scripts exist (expected success but failed)
=== End-to-End Integration Test Results ===
Total tests: 48
Passed tests: 32
Failed tests: 16
Success rate: 66%
End-to-end integration test results saved to: /Users/lsendel/IdeaProjects/rust-security/reports/end-to-end-integration-test.json
⚠️  Some integration tests failed. Check logs for details.
❌ System integration has significant issues (66% success rate)
Cleaning up...
