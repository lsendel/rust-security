# Agent OS Integration Configuration for Rust Security Platform
# Version: 1.0.0
# Last Updated: 2025-08-28

apiVersion: v1
kind: ConfigMap
metadata:
  name: agent-os-config
  namespace: rust-security
  labels:
    app: rust-security-platform
    component: agent-os-integration
    version: "1.0.0"
data:
  # Agent OS Configuration
  agent-os.yaml: |
    version: "2.0"
    
    # Service Discovery Configuration
    services:
      auth-service:
        endpoint: "http://auth-service:8080"
        health_check: "/health"
        metrics: "/metrics"
        ready_check: "/ready"
        protocols:
          - "http"
          - "grpc"
        
      policy-service:
        endpoint: "http://policy-service:8081"
        health_check: "/health"
        metrics: "/metrics"
        ready_check: "/ready"
        protocols:
          - "http"
          - "grpc"
    
    # Integration Points
    integrations:
      api_gateway:
        enabled: true
        auth_endpoint: "${AUTH_SERVICE_URL}/oauth/token"
        validation_endpoint: "${AUTH_SERVICE_URL}/oauth/introspect"
        
      service_mesh:
        enabled: true
        type: "istio"
        mtls_mode: "strict"
        
      monitoring:
        enabled: true
        prometheus_endpoint: "${PROMETHEUS_URL}/api/v1"
        grafana_endpoint: "${GRAFANA_URL}"
        
      logging:
        enabled: true
        format: "json"
        level: "info"
        destination: "stdout"
        
      tracing:
        enabled: true
        jaeger_endpoint: "${JAEGER_URL}"
        sample_rate: 0.1
    
    # Security Configuration
    security:
      authentication:
        required: true
        methods:
          - "oauth2"
          - "jwt"
          - "mtls"
          
      authorization:
        engine: "cedar"
        policy_store: "${POLICY_SERVICE_URL}/policies"
        
      encryption:
        in_transit: true
        at_rest: true
        cipher_suites:
          - "TLS_AES_256_GCM_SHA384"
          - "TLS_CHACHA20_POLY1305_SHA256"
    
    # Performance Configuration
    performance:
      connection_pool:
        max_connections: 100
        connection_timeout: "30s"
        idle_timeout: "60s"
        
      circuit_breaker:
        enabled: true
        failure_threshold: 5
        recovery_timeout: "30s"
        
      rate_limiting:
        enabled: true
        requests_per_second: 1000
        burst_size: 100
    
    # Health Monitoring
    health:
      checks:
        - name: "database"
          interval: "30s"
          timeout: "5s"
          
        - name: "redis"
          interval: "15s"
          timeout: "3s"
          
        - name: "external_apis"
          interval: "60s"
          timeout: "10s"
      
      alerts:
        - condition: "health_check_failure"
          threshold: 3
          action: "restart_service"
          
        - condition: "high_latency"
          threshold: "1s"
          action: "scale_up"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: agent-os-environment
  namespace: rust-security
data:
  # Environment Variables for Agent OS Integration
  AUTH_SERVICE_URL: "http://auth-service:8080"
  POLICY_SERVICE_URL: "http://policy-service:8081"
  PROMETHEUS_URL: "http://prometheus:9090"
  GRAFANA_URL: "http://grafana:3000"
  JAEGER_URL: "http://jaeger:14268"
  
  # Service Discovery
  CONSUL_URL: "http://consul:8500"
  ETCD_ENDPOINTS: "http://etcd:2379"
  
  # Security
  TLS_ENABLED: "true"
  MTLS_ENABLED: "true"
  JWT_SECRET_KEY: "secret://vault/jwt-secret"
  
  # Performance
  MAX_CONCURRENT_REQUESTS: "1000"
  CONNECTION_TIMEOUT: "30s"
  REQUEST_TIMEOUT: "60s"
  
  # Monitoring
  METRICS_ENABLED: "true"
  TRACING_ENABLED: "true"
  LOG_LEVEL: "info"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: agent-os-coordinator
  namespace: rust-security
  labels:
    app: agent-os
    component: coordinator
spec:
  replicas: 2
  selector:
    matchLabels:
      app: agent-os
      component: coordinator
  template:
    metadata:
      labels:
        app: agent-os
        component: coordinator
        version: "1.0.0"
    spec:
      serviceAccountName: agent-os-service-account
      
      containers:
      - name: coordinator
        image: agent-os/coordinator:latest
        imagePullPolicy: Always
        
        ports:
        - containerPort: 8090
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        
        env:
        - name: RUST_LOG
          value: "info"
        - name: CONFIG_PATH
          value: "/etc/agent-os/agent-os.yaml"
        
        envFrom:
        - configMapRef:
            name: agent-os-environment
        
        volumeMounts:
        - name: config
          mountPath: /etc/agent-os
          readOnly: true
        - name: tls-certs
          mountPath: /etc/tls
          readOnly: true
        
        livenessProbe:
          httpGet:
            path: /health
            port: 8090
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          
        readinessProbe:
          httpGet:
            path: /ready
            port: 8090
          initialDelaySeconds: 15
          periodSeconds: 5
          timeoutSeconds: 3
        
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
        
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      
      volumes:
      - name: config
        configMap:
          name: agent-os-config
      - name: tls-certs
        secret:
          secretName: agent-os-tls-certs
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - coordinator
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: agent-os-coordinator
  namespace: rust-security
  labels:
    app: agent-os
    component: coordinator
spec:
  type: ClusterIP
  ports:
  - port: 8090
    targetPort: 8090
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: agent-os
    component: coordinator

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: agent-os-service-account
  namespace: rust-security
  labels:
    app: agent-os

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: agent-os-coordinator
  labels:
    app: agent-os
rules:
- apiGroups: [""]
  resources: ["services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: agent-os-coordinator
  labels:
    app: agent-os
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: agent-os-coordinator
subjects:
- kind: ServiceAccount
  name: agent-os-service-account
  namespace: rust-security

---
# NetworkPolicy for Agent OS Components
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: agent-os-network-policy
  namespace: rust-security
spec:
  podSelector:
    matchLabels:
      app: agent-os
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    - podSelector:
        matchLabels:
          app: prometheus
    ports:
    - protocol: TCP
      port: 9090
  
  - from:
    - podSelector:
        matchLabels:
          app: rust-security-platform
    ports:
    - protocol: TCP
      port: 8090
  
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: rust-security-platform
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8081
  
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53