# Vault External Secrets Configuration
# This configures External Secrets to retrieve secrets from HashiCorp Vault
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-secret-store
  namespace: rust-security
spec:
  provider:
    vault:
      server: "https://vault.example.com"
      path: "secret"
      version: "v2"
      auth:
        # Option 1: Token authentication (for dev/testing)
        tokenSecretRef:
          name: vault-token
          key: token
        # Option 2: Kubernetes authentication (recommended for production)
        # kubernetes:
        #   mountPath: "auth/kubernetes"
        #   role: "rust-security-role"
        #   serviceAccountRef:
        #     name: auth-service
      caProvider:
        type: "ConfigMap"
        name: "vault-ca-cert"
        key: "ca.crt"
---
# Vault token secret (for token-based auth)
apiVersion: v1
kind: Secret
metadata:
  name: vault-token
  namespace: rust-security
type: Opaque
data:
  # Replace with actual base64-encoded Vault token
  token: <BASE64_ENCODED_VAULT_TOKEN>
---
# Auth Service External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: auth-service-secrets
  namespace: rust-security
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: security
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: auth-service-secret
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: auth-service
          app.kubernetes.io/managed-by: external-secrets
        annotations:
          external-secrets.io/last-refresh: "{{ now | unixEpoch }}"
  data:
    - secretKey: jwt-secret
      remoteRef:
        key: auth-service/jwt
        property: secret
    - secretKey: client-credentials
      remoteRef:
        key: auth-service/clients
        property: credentials
    - secretKey: request-signing-secret
      remoteRef:
        key: auth-service/signing
        property: secret
    - secretKey: google-client-secret
      remoteRef:
        key: auth-service/oauth/google
        property: client_secret
    - secretKey: redis-password
      remoteRef:
        key: auth-service/redis
        property: password
---
# Redis External Secret (if using external Redis)
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: redis-secrets
  namespace: rust-security
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: database
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: redis-secret
    creationPolicy: Owner
  data:
    - secretKey: redis-password
      remoteRef:
        key: redis/auth
        property: password
---
# Service Account for Vault Kubernetes auth (production recommended)
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-auth-sa
  namespace: rust-security
  annotations:
    vault.hashicorp.com/role: "rust-security-role"
---
# ClusterRoleBinding for Vault authentication
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-auth-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: vault-auth-sa
  namespace: rust-security