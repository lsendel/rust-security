# Google Secret Manager External Secrets Configuration
# This configures External Secrets to retrieve secrets from Google Secret Manager
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: gcp-secrets-store
  namespace: rust-security
spec:
  provider:
    gcpsm:
      projectId: your-gcp-project-id
      auth:
        # Option 1: Workload Identity (recommended)
        workloadIdentity:
          clusterLocation: us-central1
          clusterName: rust-security-cluster
          serviceAccountRef:
            name: auth-service-gcp-sa
        # Option 2: Service Account Key (not recommended for production)
        # secretRef:
        #   secretAccessKey:
        #     name: gcp-credentials
        #     key: service-account-key
---
# Service Account with Workload Identity annotations
apiVersion: v1
kind: ServiceAccount
metadata:
  name: auth-service-gcp-sa
  namespace: rust-security
  annotations:
    # Replace with your actual Google Service Account email
    iam.gke.io/gcp-service-account: rust-security-secrets@PROJECT_ID.iam.gserviceaccount.com
---
# Auth Service External Secret for GCP
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: auth-service-gcp-secrets
  namespace: rust-security
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: security
    secrets.external-secrets.io/backend: gcp
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: gcp-secrets-store
    kind: SecretStore
  target:
    name: auth-service-secret
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: auth-service
          app.kubernetes.io/managed-by: external-secrets
        annotations:
          external-secrets.io/last-refresh: "{{ now | unixEpoch }}"
          secrets.external-secrets.io/source: "gcp-secret-manager"
  data:
    # JWT signing secret
    - secretKey: jwt-secret
      remoteRef:
        key: rust-security-auth-service-jwt-secret
        version: latest
    # Client credentials for OAuth
    - secretKey: client-credentials
      remoteRef:
        key: rust-security-auth-service-client-credentials
        version: latest
    # Request signing secret for admin endpoints
    - secretKey: request-signing-secret
      remoteRef:
        key: rust-security-auth-service-request-signing-secret
        version: latest
    # Google OAuth client secret
    - secretKey: google-client-secret
      remoteRef:
        key: rust-security-auth-service-google-client-secret
        version: latest
    # Redis password
    - secretKey: redis-password
      remoteRef:
        key: rust-security-redis-password
        version: latest
---
# GCP Service Account Key Secret (if not using Workload Identity)
# apiVersion: v1
# kind: Secret
# metadata:
#   name: gcp-credentials
#   namespace: rust-security
# type: Opaque
# data:
#   service-account-key: <BASE64_ENCODED_SERVICE_ACCOUNT_JSON_KEY>
---
# Cluster Secret Store (for cluster-wide secrets)
apiVersion: external-secrets.io/v1beta1
kind: ClusterSecretStore
metadata:
  name: gcp-cluster-secrets-store
spec:
  provider:
    gcpsm:
      projectId: your-gcp-project-id
      auth:
        workloadIdentity:
          clusterLocation: us-central1
          clusterName: rust-security-cluster
          serviceAccountRef:
            name: external-secrets-sa
            namespace: external-secrets-system