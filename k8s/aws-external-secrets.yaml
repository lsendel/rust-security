# AWS Secrets Manager External Secrets Configuration
# This configures External Secrets to retrieve secrets from AWS Secrets Manager
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-store
  namespace: rust-security
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        # Option 1: IAM Role (recommended with IRSA)
        jwt:
          serviceAccountRef:
            name: auth-service-aws-sa
        # Option 2: Access Key (not recommended for production)
        # secretRef:
        #   accessKeyIDSecretRef:
        #     name: aws-credentials
        #     key: access-key-id
        #   secretAccessKeySecretRef:
        #     name: aws-credentials
        #     key: secret-access-key
---
# Service Account with IAM Role for Service Accounts (IRSA) annotations
apiVersion: v1
kind: ServiceAccount
metadata:
  name: auth-service-aws-sa
  namespace: rust-security
  annotations:
    # Replace with your actual IAM role ARN
    eks.amazonaws.com/role-arn: arn:aws:iam::ACCOUNT_ID:role/rust-security-secrets-role
---
# Auth Service External Secret for AWS
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: auth-service-aws-secrets
  namespace: rust-security
  labels:
    app.kubernetes.io/name: auth-service
    app.kubernetes.io/component: security
    secrets.external-secrets.io/backend: aws
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: aws-secrets-store
    kind: SecretStore
  target:
    name: auth-service-secret
    creationPolicy: Owner
    template:
      type: Opaque
      metadata:
        labels:
          app.kubernetes.io/name: auth-service
          app.kubernetes.io/managed-by: external-secrets
        annotations:
          external-secrets.io/last-refresh: "{{ now | unixEpoch }}"
          secrets.external-secrets.io/source: "aws-secrets-manager"
  data:
    # JWT signing secret
    - secretKey: jwt-secret
      remoteRef:
        key: rust-security/auth-service/jwt-secret
        property: secret
    # Client credentials for OAuth
    - secretKey: client-credentials
      remoteRef:
        key: rust-security/auth-service/client-credentials
        property: credentials
    # Request signing secret for admin endpoints
    - secretKey: request-signing-secret
      remoteRef:
        key: rust-security/auth-service/request-signing-secret
        property: secret
    # Google OAuth client secret
    - secretKey: google-client-secret
      remoteRef:
        key: rust-security/auth-service/google-oauth
        property: client_secret
    # Redis password
    - secretKey: redis-password
      remoteRef:
        key: rust-security/redis/password
        property: password
---
# AWS Credentials Secret (if not using IRSA)
# apiVersion: v1
# kind: Secret
# metadata:
#   name: aws-credentials
#   namespace: rust-security
# type: Opaque
# data:
#   access-key-id: <BASE64_ENCODED_ACCESS_KEY_ID>
#   secret-access-key: <BASE64_ENCODED_SECRET_ACCESS_KEY>
---
# Policy Service External Secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: policy-service-aws-secrets
  namespace: rust-security
  labels:
    app.kubernetes.io/name: policy-service
    app.kubernetes.io/component: authorization
spec:
  refreshInterval: 15m
  secretStoreRef:
    name: aws-secrets-store
    kind: SecretStore
  target:
    name: policy-service-secret
    creationPolicy: Owner
  data:
    # Policy service API keys
    - secretKey: api-key
      remoteRef:
        key: rust-security/policy-service/api-key
        property: key
    # Database connection credentials (if using external DB)
    - secretKey: database-url
      remoteRef:
        key: rust-security/policy-service/database
        property: url