apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: rust-security
  labels:
    app: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'rust-security-cluster'
        environment: 'production'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
        - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
          action: keep
          regex: default;kubernetes;https

      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
        - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - action: labelmap
          regex: __meta_kubernetes_node_label_(.+)
        - target_label: __address__
          replacement: kubernetes.default.svc:443
        - source_labels: [__meta_kubernetes_node_name]
          regex: (.+)
          target_label: __metrics_path__
          replacement: /api/v1/nodes/${1}/proxy/metrics

      # Kubernetes Pods
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
        - role: pod
        relabel_configs:
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_pod_name]
          action: replace
          target_label: kubernetes_pod_name

      # Auth Service
      - job_name: 'auth-service'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - rust-security
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: auth-service
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: metrics
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_name
        scrape_interval: 10s
        metrics_path: /metrics

      # Policy Service
      - job_name: 'policy-service'
        kubernetes_sd_configs:
        - role: endpoints
          namespaces:
            names:
            - rust-security
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          action: keep
          regex: policy-service
        - source_labels: [__meta_kubernetes_endpoint_port_name]
          action: keep
          regex: metrics
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_name
        scrape_interval: 10s
        metrics_path: /metrics

      # Redis
      - job_name: 'redis'
        static_configs:
        - targets: ['redis:9121']
        scrape_interval: 30s

      # PostgreSQL
      - job_name: 'postgresql'
        static_configs:
        - targets: ['postgres-exporter:9187']
        scrape_interval: 30s

  alert_rules.yml: |
    groups:
    - name: rust-security-alerts
      rules:
      # High Error Rate
      - alert: HighErrorRate
        expr: rate(auth_requests_total{status=~"5.."}[5m]) / rate(auth_requests_total[5m]) > 0.05
        for: 2m
        labels:
          severity: warning
          service: auth-service
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value | humanizePercentage }} for {{ $labels.instance }}"

      # High Response Time
      - alert: HighResponseTime
        expr: histogram_quantile(0.95, rate(auth_request_duration_seconds_bucket[5m])) > 0.5
        for: 2m
        labels:
          severity: warning
          service: auth-service
        annotations:
          summary: "High response time detected"
          description: "95th percentile response time is {{ $value }}s for {{ $labels.instance }}"

      # Service Down
      - alert: ServiceDown
        expr: up{job="auth-service"} == 0
        for: 1m
        labels:
          severity: critical
          service: auth-service
        annotations:
          summary: "Auth service is down"
          description: "Auth service {{ $labels.instance }} has been down for more than 1 minute"

      # High Memory Usage
      - alert: HighMemoryUsage
        expr: (container_memory_usage_bytes{pod=~"auth-service-.*"} / container_spec_memory_limit_bytes) > 0.8
        for: 5m
        labels:
          severity: warning
          service: auth-service
        annotations:
          summary: "High memory usage"
          description: "Memory usage is {{ $value | humanizePercentage }} for {{ $labels.pod }}"

      # High CPU Usage
      - alert: HighCPUUsage
        expr: rate(container_cpu_usage_seconds_total{pod=~"auth-service-.*"}[5m]) > 0.8
        for: 5m
        labels:
          severity: warning
          service: auth-service
        annotations:
          summary: "High CPU usage"
          description: "CPU usage is {{ $value | humanizePercentage }} for {{ $labels.pod }}"

      # Failed Authentication Spike
      - alert: FailedAuthenticationSpike
        expr: rate(auth_failed_attempts_total[5m]) > 10
        for: 2m
        labels:
          severity: warning
          service: auth-service
        annotations:
          summary: "High number of failed authentication attempts"
          description: "Failed authentication rate is {{ $value }} per second"

      # Database Connection Issues
      - alert: DatabaseConnectionIssues
        expr: auth_database_connections_failed_total > 0
        for: 1m
        labels:
          severity: critical
          service: auth-service
        annotations:
          summary: "Database connection failures"
          description: "Database connection failures detected: {{ $value }}"

      # Redis Connection Issues
      - alert: RedisConnectionIssues
        expr: auth_redis_connections_failed_total > 0
        for: 1m
        labels:
          severity: warning
          service: auth-service
        annotations:
          summary: "Redis connection failures"
          description: "Redis connection failures detected: {{ $value }}"

      # JWT Validation Failures
      - alert: JWTValidationFailures
        expr: rate(auth_jwt_validation_failures_total[5m]) > 1
        for: 2m
        labels:
          severity: warning
          service: auth-service
        annotations:
          summary: "High JWT validation failure rate"
          description: "JWT validation failure rate is {{ $value }} per second"

      # Rate Limit Violations
      - alert: RateLimitViolations
        expr: rate(auth_rate_limit_violations_total[5m]) > 5
        for: 2m
        labels:
          severity: warning
          service: auth-service
        annotations:
          summary: "High rate limit violation rate"
          description: "Rate limit violation rate is {{ $value }} per second"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: rust-security
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus-sa
      containers:
      - name: prometheus
        image: prom/prometheus:v2.40.0
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus/'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=15d'
        - '--web.enable-lifecycle'
        - '--web.enable-admin-api'
        ports:
        - containerPort: 9090
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: rust-security
  labels:
    app: prometheus
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
  selector:
    app: prometheus

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-sa
  namespace: rust-security

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-role
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-role
subjects:
- kind: ServiceAccount
  name: prometheus-sa
  namespace: rust-security

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage
  namespace: rust-security
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: gp2
