version: '3.8'

services:
  # Main Auth Service
  auth-service:
    build:
      context: ../../
      dockerfile: auth-service/Dockerfile.prod
    ports:
      - "8080:8080"
    environment:
      - RUST_ENV=production
      - RUST_LOG=info,auth_service=debug
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_SECRET=${ADMIN_SECRET}
      - REQUEST_SIGNING_SECRET=${REQUEST_SIGNING_SECRET}
      - REQUIRE_ADMIN_SIGNING=true
      - ENABLE_METRICS=true
      - MONITORING_PORT=9090
      - RATE_LIMIT_REDIS_URL=${REDIS_URL}
      - SECURITY_HEADERS_ENABLED=true
    depends_on:
      - postgres
      - redis
    networks:
      - auth-network
    volumes:
      - auth-logs:/app/logs
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '2'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 512M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Policy Service
  policy-service:
    build:
      context: ../../
      dockerfile: policy-service/Dockerfile.prod
    ports:
      - "8081:8081"
    environment:
      - RUST_ENV=production
      - RUST_LOG=info,policy_service=debug
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - AUTH_SERVICE_URL=http://auth-service:8080
      - CEDAR_POLICY_STORE_PATH=/app/policies
    depends_on:
      - postgres
      - redis
      - auth-service
    networks:
      - auth-network
    volumes:
      - policy-storage:/app/policies
      - policy-logs:/app/logs
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Production PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "5432:5432"
    networks:
      - auth-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c log_statement=all
      -c log_duration=on
      -c log_connections=on
      -c log_disconnections=on
      -c log_hostname=on
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/server.crt
      -c ssl_key_file=/var/lib/postgresql/server.key

  # Redis for Caching and Rate Limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - auth-network
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M

  # Nginx Load Balancer with Security Headers
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    networks:
      - auth-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/security.conf:/etc/nginx/conf.d/security.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - auth-service
      - policy-service
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 256M

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    networks:
      - auth-network
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'

  # Grafana for Security Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - auth-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/datasources:/etc/grafana/provisioning/datasources:ro

networks:
  auth-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
  redis-data:
  auth-logs:
  policy-logs:
  policy-storage:
  nginx-logs:
  prometheus-data:
  grafana-data: